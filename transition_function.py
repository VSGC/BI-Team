# -*- coding: utf-8 -*-
"""
Created on Tue Nov  8 15:06:36 2022

@author: VAIBHAV.SRIVASTAV01
"""

import pandas as pd
import pyodbc
import sys
import os



con_dm = pyodbc.connect('DSN=GHF_BI_CONN_DM;UID=GHF_BI_CONN;PWD=Godrej@123')
con = pyodbc.connect('DSN=GHF_BI_CONN;UID=GHF_BI_CONN;PWD=Godrej@123')
con_dm_nbfc = pyodbc.connect('DSN=GHF_BI_CONN_DM_NBFC;UID=GHF_BI_CONN;PWD=Godrej@123')
query ="SELECT * from prod_da_db.serve.loan_view limit 100"

p = "use database sample_db"

q = "use schema public"

con_dm.execute(p)
con_dm.execute(q)

q = "show tables"

tables =pd.read_sql(q, con_dm)


ghf_loan_view=pd.read_sql("SELECT * from prod_da_db.serve.loan_view WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm)
ghf_loan_view['NBFC_FLAG'] = 'N'
ghf_base_view = pd.read_sql("SELECT * from prod_da_db.serve.BASE_VIEW WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm)
ghf_base_view['NBFC_FLAG'] = 'N'
ghf_customer_base = pd.read_sql("SELECT * from prod_da_db.serve.customer_base WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm)
ghf_customer_base['NBFC_FLAG'] = 'N'
ghf_insurance_view = pd.read_sql("SELECT * from prod_da_db.serve.INSURANCE_VIEW WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm)
ghf_insurance_view ['NBFC_FLAG'] = 'N'
ghf_lanvas=pd.read_sql("SELECT * from prod_da_db.serve.x_ref_lan_to_vas WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm)
ghf_lanvas['NBFC_FLAG'] = 'N'
ghf_lancif=pd.read_sql("SELECT * from prod_da_db.serve.x_ref_lan_to_cif WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm)
ghf_lancif['NBFC_FLAG'] = 'N'
ghf_cifvas=pd.read_sql("SELECT * from prod_da_db.serve.x_ref_cif_to_vas WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm)
ghf_cifvas['NBFC_FLAG'] = 'N'
ghf_lancollat=pd.read_sql("SELECT * from prod_da_db.serve.x_ref_lan_to_collat WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm)
ghf_lancollat['NBFC_FLAG'] = 'N'

gfl_loan_view=pd.read_sql("SELECT * from prod_gfl_da_db.serve.loan_view WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm_nbfc)
gfl_loan_view['NBFC_FLAG'] = 'Y'
gfl_base_view = pd.read_sql("SELECT * from prod_gfl_da_db.serve.BASE_VIEW WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm_nbfc)
gfl_base_view['NBFC_FLAG'] = 'Y'
gfl_customer_base = pd.read_sql("SELECT * from prod_gfl_da_db.serve.customer_base WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm_nbfc)
gfl_customer_base['NBFC_FLAG'] = 'Y'
gfl_insurance_view = pd.read_sql("SELECT * from prod_gfl_da_db.serve.INSURANCE_VIEW WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm_nbfc)
gfl_insurance_view['NBFC_FLAG'] = 'Y'
gfl_lanvas=pd.read_sql("SELECT * from prod_gfl_da_db.serve.x_ref_lan_to_vas WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm_nbfc)
gfl_lanvas['NBFC_FLAG'] = 'Y'
gfl_lancif=pd.read_sql("SELECT * from prod_gfl_da_db.serve.x_ref_lan_to_cif WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm_nbfc)
gfl_lancif['NBFC_FLAG'] = 'Y'
gfl_cifvas=pd.read_sql("SELECT * from prod_gfl_da_db.serve.x_ref_cif_to_vas WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm_nbfc)
gfl_cifvas['NBFC_FLAG'] = 'Y'
gfl_lancollat=pd.read_sql("SELECT * from prod_gfl_da_db.serve.x_ref_lan_to_collat WHERE DH_RECORD_ACTIVE_FLAG = 'Y'", con_dm_nbfc)
gfl_lancollat['NBFC_FLAG'] = 'Y'

loan_view=pd.concat([ghf_loan_view,gfl_loan_view]) #REFERENCE
base_view=pd.concat([ghf_base_view,gfl_base_view]) # LAN_ID
customer_view=pd.concat([ghf_customer_base,gfl_customer_base]) # CIF
insurance_view=pd.concat([ghf_insurance_view,gfl_insurance_view]) # LAN_ID
lanvas=pd.concat([ghf_lanvas,gfl_lanvas])
lancif=pd.concat([ghf_lancif,gfl_lancif])
cifvas=pd.concat([ghf_cifvas,gfl_cifvas])
lancollat=pd.concat([ghf_lancollat,gfl_lancollat])


fileObject = open(r"\\GHFL-SNOWFLAKES\Users\bischeduler\Documents\Codes_to_be_Scheduled\LOS\bigsql_Tuesday_Sunday.sql")
data = fileObject.read()

# sqlScript = data.readlines()
for statement in data.split(';'):
    with con.cursor() as cur:
        cur.execute(statement)
    

'''
--LOS Code (Tuesday_Sunday_updated_28th Dec 2021)
------------- VSj4 Sample_DB ------------


create or Replace view MIS_CREDIT_LOAN_STATUS_VIEW3 as
select DISTINCT MIS_CREDIT_LOAN_STATUS_VIEW.* from TAT_NEW_DATA2 left join
MIS_CREDIT_LOAN_STATUS_VIEW on LAN = LANID
where CUSTOMER_CATEGORY = 'Applicant';

drop table V_TAT_DATA;
create table V_TAT_DATA as 
select distinct * from TAT_NEW_DATA2; 
delete from V_TAT_DATA 
where LAN = 'GHF1401HL0000252' and LOANAMOUNT = 495000000;

DROP TABLE GPLFLAGLOOKUPTABLE;
CREATE TABLE GPLFLAGLOOKUPTABLE
AS
(
select distinct lanid,
CASE WHEN UPPER(PROJECTNAME) LIKE '%GODREJ%' OR UPPER(PROJECTNAME) LIKE '%TREES%' THEN 'YES'
WHEN PROJECTNAME is null AND (GPLFLAG <> 'NO' or GPLFLAG is null) THEN 'YES'
WHEN GPLFLAG is null THEN 'YES'
else GPLFLAG end as GPLFLAG
from MIS_CREDIT_LOAN_STATUS_VIEW3
where (lanid like'%HL%' or lanid like'%HT%' or lanid like'%LT%')
  
union all

select distinct a.lanid,B.gplflag
from MIS_CREDIT_LOAN_STATUS_VIEW3 a
inner join
(
select distinct cif,
CASE WHEN UPPER(PROJECTNAME) LIKE '%GODREJ%' OR UPPER(PROJECTNAME) LIKE '%TREES%' THEN 'YES'
WHEN PROJECTNAME is null AND (GPLFLAG <> 'NO' or GPLFLAG is null) THEN 'YES'
WHEN GPLFLAG is null THEN 'YES'
else GPLFLAG end as GPLFLAG
from MIS_CREDIT_LOAN_STATUS_VIEW3
where lanid like'%HL%' or lanid like'%HT%'
)b
on a.cif = b.cif and (a.lanid like'%FL%' or a.lanid like'%FT%')
);


drop table V_INSURANCE_DUMP;
create table V_INSURANCE_DUMP
as
select LANID, sum(NET_PREMIUM) 
as NET_PREMIUM
from (select distinct LANID,VASREFERECE,NET_PREMIUM,INSURANCE_CODE,INSURANCE_TYPE,LOAN_ACTIVE_STATUS,'N' NBFC_FLAG from MIS_INSURANCE_V)
group By LANID,LOAN_ACTIVE_STATUS
having LOAN_ACTIVE_STATUS ='Active';
drop table V_PO;
create table V_PO as
select distinct * from MIS_LOAN_OUTSTANDING_VIEW;
Delete from V_PO
where LOAN_NUMBER = 'GHF1001FL0000912'
or LOAN_NUMBER = 'GHF1101HL0000251';
drop table SV_FINDISBURSEMENTDETAILS;
create table SV_FINDISBURSEMENTDETAILS as 
select distinct *,'N' NBFC_FLAG from FINDISBURSEMENTDETAILS;
Delete from SV_FINDISBURSEMENTDETAILS
where FINREFERENCE = 'GHF1001FL0000912'
or FINREFERENCE = 'GHF1101HL0000251';
drop table FIRSTDISB;
create table FIRSTDISB as 
select  FINREFERENCE,DISBDATE,MONTH(DISBDATE) as FIRSTMONTHDISB, DISBAMOUNT/1000000000 as FIRSTDISBAMOUNT  from SV_FINDISBURSEMENTDETAILS
where DISBSEQ = 1; 
drop table MAXDISB;
create table MAXDISB as 
select FINREFERENCE,Max(DISBDATE) as MAXDISBDATE,sum(DISBAMOUNT/1000000000)  as MAXDISBAMOUNT,MAX(DISBSEQ) as MAXDISBSEQ from SV_FINDISBURSEMENTDETAILS
group by FINREFERENCE;
drop table TOTALDISB;
create table TOTALDISB as
select FINREFERENCE,sum(DISBAMOUNT/1000000000) as TOTALDISBAMOUNT 
from SV_FINDISBURSEMENTDETAILS
group by FINREFERENCE;
DROP TABLE SJCron_MIS_FINANCE_VIEW;
CREATE TABLE SJCron_MIS_FINANCE_VIEW
as
SELECT distinct A.FINREFERENCE, NEXTROLECODE, ROLECODE, RECORDSTATUS, FINSOURCEID, B.LOAN_STATUS,C.FINBRANCH,
CASE WHEN FINSOURCEID = 'APIUSER' AND D.FIRST_DDE IS NOT NULL THEN D.FIRST_DDE
ELSE D.FIRST_QDE
END as LOGIN_DATE
FROM MIS_FINANCE_VIEW A
LEFT JOIN MIS_DISBURSEMENT_NEW_VIEW B
ON A.FINREFERENCE=B.FINREFERENCE
LEFT JOIN LOAN_DATA3 C on C.FINREFERENCE = A.FINREFERENCE
LEFT JOIN V_TAT_DATA D
ON A.FINREFERENCE = D.LAN;
Update SJCron_MIS_FINANCE_VIEW
SET FINBRANCH = 'Delhi'
where FINBRANCH = 'Gurgaon';
Update SJCron_MIS_FINANCE_VIEW
SET FINBRANCH = 'Bangalore'
where FINBRANCH = 'Bangalore (MG Road)';
Update SJCron_MIS_FINANCE_VIEW
SET FINBRANCH = 'Bangalore'
where FINBRANCH = 'Banglore (Sahakar Nagar)';
Update SJCron_MIS_FINANCE_VIEW
SET FINBRANCH = 'Pune'
where FINBRANCH = 'Aundh BO (Pune)';
Update SJCron_MIS_FINANCE_VIEW
SET FINBRANCH = 'Mumbai'
where FINBRANCH = 'Thane';
drop table SJCron_MIS_FINANCE_VIEW1;
create table SJCron_MIS_FINANCE_VIEW1 as 
select * from SJCron_MIS_FINANCE_VIEW;
Update SJCron_MIS_FINANCE_VIEW1
set LOAN_STATUS = 'NULL' where LOAN_STATUS is NULL;
Update SJCron_MIS_FINANCE_VIEW1
set NEXTROLECODE = 'NULL' where NEXTROLECODE = '';
Update SJCron_MIS_FINANCE_VIEW1
set ROLECODE = 'NULL' where ROLECODE = '';
Update SJCron_MIS_FINANCE_VIEW1
set RECORDSTATUS = 'NULL' where RECORDSTATUS = '';
Update SJCron_MIS_FINANCE_VIEW1
set FINSOURCEID = 'NULL' where FINSOURCEID is null;
DROP TABLE SJCron_MIS_FINANCE_VIEW_wLoanStatus1; 
CREATE TABLE SJCron_MIS_FINANCE_VIEW_wLoanStatus1 AS
select distinct A.FINREFERENCE,trim(A.NEXTROLECODE) as NEXTROLECODE,trim(A.ROLECODE) as ROLECODE,trim(A.RECORDSTATUS) as RECORDSTATUS
,trim(A.FINSOURCEID) as FINSOURCEID,
trim(A.LOAN_STATUS) as LOAN_STATUS ,A.FINBRANCH,A.LOGIN_DATE,
coalesce(b.detailed_status, c.detailed_status,
case
when a.recordstatus ='Approved' and loan_status = 'Active'
then 'Booked'
when a.recordstatus ='Approved' and loan_status = 'Close'
then 'Post disbursement cancellation'
when a.recordstatus ='Cancelled'
then 'Cancelled'
end) as DETAILED_STATUS,d.STATUS,d.QUEUE
from SJCron_MIS_FINANCE_VIEW1 A
left join v_nextrolestatus b on a.nextrolecode = b.nextrolecode
left join v_rolestatus c on a.rolecode = c.rolecode and a.recordstatus = c.recordstatus and a.nextrolecode = 'NULL'
left join DS_STATUS_QUEUE_MAPPING d on
coalesce(b.detailed_status, c.detailed_status,
case
when a.recordstatus ='Approved' and loan_status = 'Active'
then 'Booked'
when a.recordstatus ='Approved' and loan_status = 'Close'
then 'Post disbursement cancellation'
when a.recordstatus ='Cancelled'
then 'Cancelled'
end) = d.DETAILED_STATUS;

SET yesterday = TO_DATE(CONVERT_TIMEZONE('Asia/Kolkata',CURRENT_TIMESTAMP()))-1;
DROP TABLE VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1;
CREATE TABLE VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
AS
SELECT distinct A.*,C.FIRST_PSV,C.FIRST_ENTRY_TO_COLLATERAL,C.FIRST_REJECT_DATE, G.LOAN_PURPOSE, D.FINTYPE AS FINTYPE_TECH,
CASE WHEN TRIM(LOAN_PURPOSE)IN ('LAP Balance Transfer plus Top-up','Loan against Property',
                                                     'Industrial LAP Balance Transfer','Industrial LAP Balance Transfer plus Top-up',
                                                     'LAP Balance Transfer','Loan against industrial property','LAP Top Up') THEN 'LP'
--WHEN TRIM(LOAN_PURPOSE) IN ('LAP Top Up') THEN 'LT'                                                 
else FINTYPE_TECH                                                           
end as FINTYPE,
D.REQLOANAMT,D.CALCULATEDRATE as ROI,
G.FINALLOANAMOUNT,H.DISB_AMOUNT,H.LOAN_AMOUNT as Booked_Amount,H.DISB_AMOUNT as DISBURSED_AMOUNT,I.TOTALPRIBAL as PRINCIPAL_OUTSTANDING,
J.DISBDATE as BOOKING_DATE, G.EMPLOYMENT_TYPE, K.CRE, G.RESIDENTIAL_STATUS, G.PROJECTID, G.PROJECTNAME, P.GPLFLAG
FROM SJCron_MIS_FINANCE_VIEW_WLOANSTATUS1 A
LEFT JOIN V_TAT_DATA C
ON A.FINREFERENCE = C.LAN
LEFT join MIS_FINANCE_VIEW D on D.FINREFERENCE = A.FINREFERENCE
LEFT join MIS_CREDIT_LOAN_STATUS_VIEW3 G on G.LANID = A.FINREFERENCE 
Left JOIN MIS_DISBURSEMENT_NEW_VIEW H on H.FINREFERENCE = A.FINREFERENCE
Left join V_PO I on I.LOAN_NUMBER = A.FINREFERENCE
left join (select FINREFERENCE,DISBDATE from SV_FINDISBURSEMENTDETAILS where DISBSEQ = 1) J on J.FINREFERENCE = A.FINREFERENCE
left join (SELECT DISTINCT LAN, PEP, CRE FROM MIS_LOAN_LEVEL_DETAILS_VIEW) K ON A.FINREFERENCE=K.LAN
left join (SELECT DISTINCT LANID, GPLFLAG FROM GPLFLAGLOOKUPTABLE) P ON A.FINREFERENCE = P.LANID;


DELETE FROM VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1 A
where FINREFERENCE in (select LAN from ERRORLAN);

Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set BOOKING_DATE = NULL where BOOKING_DATE>$yesterday;
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_ENTRY_TO_COLLATERAL = NULL where TO_DATE(FIRST_ENTRY_TO_COLLATERAL)>$yesterday;
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set LOGIN_DATE = NULL where TO_DATE(LOGIN_DATE)>$yesterday;
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_PSV = NULL where TO_DATE(FIRST_PSV)>$yesterday;
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_REJECT_DATE = NULL where TO_DATE(FIRST_REJECT_DATE)>$yesterday;

Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set LOGIN_DATE = CONCAT('2022-04-30',' ',TIME(LOGIN_DATE)) 
where (TO_DATE(LOGIN_DATE) BETWEEN '2022-05-01' and '2022-05-03');
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_PSV = CONCAT('2022-04-30',' ',TIME(FIRST_PSV)) 
where (TO_DATE(FIRST_PSV) BETWEEN '2022-05-01' and '2022-05-03');
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_ENTRY_TO_COLLATERAL = CONCAT('2022-04-30',' ',TIME(FIRST_ENTRY_TO_COLLATERAL)) 
where (TO_DATE(FIRST_ENTRY_TO_COLLATERAL) BETWEEN '2022-05-01' and '2022-05-03');
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_REJECT_DATE = CONCAT('2022-04-30',' ',TIME(FIRST_REJECT_DATE)) 
where (TO_DATE(FIRST_REJECT_DATE) BETWEEN '2022-05-01' and '2022-05-03');

Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set LOGIN_DATE = CONCAT('2022-05-31',' ',TIME(LOGIN_DATE)) 
where TO_DATE(LOGIN_DATE)= '2022-06-01';
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_PSV = CONCAT('2022-05-31',' ',TIME(FIRST_PSV)) 
where TO_DATE(FIRST_PSV)= '2022-06-01';
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_ENTRY_TO_COLLATERAL = CONCAT('2022-05-31',' ',TIME(FIRST_ENTRY_TO_COLLATERAL)) 
where TO_DATE(FIRST_ENTRY_TO_COLLATERAL)= '2022-06-01';
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_REJECT_DATE = CONCAT('2022-05-31',' ',TIME(FIRST_REJECT_DATE)) 
where TO_DATE(FIRST_REJECT_DATE)= '2022-06-01';

Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set LOGIN_DATE = CONCAT('2022-06-30',' ',TIME(LOGIN_DATE)) 
where (TO_DATE(LOGIN_DATE) BETWEEN '2022-07-01' and '2022-07-02');
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_PSV = CONCAT('2022-06-30',' ',TIME(FIRST_PSV)) 
where (TO_DATE(FIRST_PSV) BETWEEN '2022-07-01' and '2022-07-02');
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_ENTRY_TO_COLLATERAL = CONCAT('2022-06-30',' ',TIME(FIRST_ENTRY_TO_COLLATERAL)) 
where (TO_DATE(FIRST_ENTRY_TO_COLLATERAL) BETWEEN '2022-07-01' and '2022-07-02');
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_REJECT_DATE = CONCAT('2022-06-30',' ',TIME(FIRST_REJECT_DATE)) 
where (TO_DATE(FIRST_REJECT_DATE) BETWEEN '2022-07-01' and '2022-07-02');

Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set LOGIN_DATE = CONCAT('2022-08-31',' ',TIME(LOGIN_DATE)) 
where (TO_DATE(LOGIN_DATE) BETWEEN '2022-09-01' and '2022-09-02');
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_PSV = CONCAT('2022-08-31',' ',TIME(FIRST_PSV)) 
where (TO_DATE(FIRST_PSV) BETWEEN '2022-09-01' and '2022-09-02');
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_ENTRY_TO_COLLATERAL = CONCAT('2022-08-31',' ',TIME(FIRST_ENTRY_TO_COLLATERAL)) 
where (TO_DATE(FIRST_ENTRY_TO_COLLATERAL) BETWEEN '2022-09-01' and '2022-09-02');
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_REJECT_DATE = CONCAT('2022-08-31',' ',TIME(FIRST_REJECT_DATE)) 
where (TO_DATE(FIRST_REJECT_DATE) BETWEEN '2022-09-01' and '2022-09-02');

Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set LOGIN_DATE = CONCAT('2022-09-30',' ',TIME(LOGIN_DATE)) 
where (TO_DATE(LOGIN_DATE) = '2022-10-01');
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_PSV = CONCAT('2022-09-30',' ',TIME(FIRST_PSV)) 
where (TO_DATE(FIRST_PSV) = '2022-10-01');
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_ENTRY_TO_COLLATERAL = CONCAT('2022-09-30',' ',TIME(FIRST_ENTRY_TO_COLLATERAL)) 
where (TO_DATE(FIRST_ENTRY_TO_COLLATERAL) = '2022-10-01');
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_REJECT_DATE = CONCAT('2022-09-30',' ',TIME(FIRST_REJECT_DATE)) 
where (TO_DATE(FIRST_REJECT_DATE) = '2022-10-01');

Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set LOGIN_DATE = CONCAT('2022-10-31',' ',TIME(LOGIN_DATE)) 
where (TO_DATE(LOGIN_DATE) BETWEEN '2022-11-01' and '2022-11-04');
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_PSV = CONCAT('2022-10-31',' ',TIME(FIRST_PSV)) 
where (TO_DATE(FIRST_PSV) BETWEEN '2022-11-01' and '2022-11-04');
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_ENTRY_TO_COLLATERAL = CONCAT('2022-10-31',' ',TIME(FIRST_ENTRY_TO_COLLATERAL)) 
where (TO_DATE(FIRST_ENTRY_TO_COLLATERAL) BETWEEN '2022-11-01' and '2022-11-04');
Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_REJECT_DATE = CONCAT('2022-10-31',' ',TIME(FIRST_REJECT_DATE)) 
where (TO_DATE(FIRST_REJECT_DATE) BETWEEN '2022-11-01' and '2022-11-04');

Update VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
SET BOOKING_DATE = '2022-04-01'
WHERE FINREFERENCE = 'GHF1002HL0010862' OR
FINREFERENCE = 'GHF1002FL0010865' OR
FINREFERENCE = 'GHF1002HL0010527' OR
FINREFERENCE = 'GHF1002HL0010885' OR
FINREFERENCE = 'GHF1002FL0010994' OR
FINREFERENCE = 'GHF1003HL0010367' OR
FINREFERENCE = 'GHF1003FL0010946' OR
FINREFERENCE = 'GHF1002HL0010399' OR
FINREFERENCE = 'GHF1002HT0010434' OR
FINREFERENCE = 'GHF1003HL0009576' OR
FINREFERENCE = 'GHF1002HL0010722' OR
FINREFERENCE = 'GHF1002HL0010827';

drop table SJCRON_APPROVALDATES;
create table SJCRON_APPROVALDATES
as 
select distinct LOAN_ACCOUNTNO, APPROVAL_DATE
from MIS_DISBURSEMENT_VIEW;

drop table VSJ4inter;
CREATE TABLE VSJ4inter AS 
select distinct A.*,B.NET_PREMIUM,
Month(LOGIN_DATE) as LOGIN_MONTH, CONCAT(YEAR(LOGIN_DATE),'-',MONTH(LOGIN_DATE)) LOGIN_YEAR_MONTH,
MONTH(FIRST_PSV) as FS_MONTH, CONCAT(YEAR(FIRST_PSV),'-',MONTH(FIRST_PSV)) FS_YEAR_MONTH,
MONTH(BOOKING_DATE) as BOOKING_MONTH, CONCAT(YEAR(BOOKING_DATE),'-',MONTH(BOOKING_DATE)) BOOK_YEAR_MONTH,
MONTH(FIRST_ENTRY_TO_COLLATERAL) as IS_MONTH, CONCAT(YEAR(FIRST_ENTRY_TO_COLLATERAL),'-',MONTH(FIRST_ENTRY_TO_COLLATERAL)) IS_YEAR_MONTH,
MONTH(FIRST_REJECT_DATE) as REJECT_MONTH, CONCAT(YEAR(FIRST_REJECT_DATE),'-',MONTH(FIRST_REJECT_DATE)) REJECT_YEAR_MONTH,
case when A.STATUS='QDE_Cancelled' THEN 'B) QDE_Cancelled'
ELSE 'A) Login'
END AS LOGINSTATUS,
case when A.STATUS in ('Sanction','Booked','Cancelled') then 'A) Final Sanction'
when STATUS in ('Rejected') then 'B) Rejected'
when A.STATUS in ('Income Sanction') then 'C) Income Sanction'
when A.STATUS in ('QDE_Cancelled') then 'D) QDE_Cancelled'
else 'WIP'
end as STATUS_SEG,
CASE WHEN FINTYPE IN ('LP','NP') THEN 'NIL'
WHEN GPLFLAG='NO' THEN 'NON GPL' 
ELSE 'GPL' 
END AS GPLFLAG_SANCTIONS,
CASE WHEN FINTYPE IN ('LP','NP') THEN 'NIL'
WHEN GPLFLAG='NO' THEN 'NON GPL' 
ELSE 'GPL' 
END AS GPLFLAG2,
case when A.FINTYPE in ('FL','FT') then 'C) Unsecured'
when A.FINTYPE in ('HL') then 'A) HL' --LAP FINTYPE ADDED
when A.FINTYPE in ('HT','LT') then 'B) BT + Topup'
when A.FINTYPE in ('LP') then 'D) LP'
when A.FINTYPE in ('NP') then 'E) NP'
else 'F) Unknown'
end as FINTYPE_SEG,                                                     

X.FIRSTDISBAMOUNT,Y.MAXDISBAMOUNT,Z.TOTALDISBAMOUNT,
(Booked_Amount*ROI) as WROI,'N' NBFC_FLAG
from VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1 A
left join SJCRON_APPROVALDATES E
on E.LOAN_ACCOUNTNO = A.FINREFERENCE
left join V_INSURANCE_DUMP B
on B.LANID = A.FINREFERENCE
left join FIRSTDISB X on X.FINREFERENCE = A.FINREFERENCE
left join MAXDISB Y on Y.FINREFERENCE = A.FINREFERENCE
left join TOTALDISB Z on Z.FINREFERENCE = A.FINREFERENCE;


Delete from VSJ4inter
where FINREFERENCE = 'GHF1401HL0000252' and FINALLOANAMOUNT = '4950000' or
FINREFERENCE = 'GHF1001HL0008788' and FINALLOANAMOUNT = '700000' or
FINREFERENCE = 'GHF1501FL0007213' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1401FT0001111' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1301FT0008542' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1401FT0007841' and GPLFLAG = 'YES' or
FINREFERENCE = 'GHF1002FL0003530' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1101FL0004629' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1001FL0005749' and GPLFLAG = 'YES' or
FINREFERENCE = 'GHF1401FT0005341' and GPLFLAG = 'YES' or
FINREFERENCE = 'GHF1402FL0006916' and GPLFLAG = 'YES' or
FINREFERENCE = 'GHF1002FT0008293' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1101FL0010221' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1101FL0010284' and GPLFLAG = 'YES' or
FINREFERENCE = 'GHF1002FL0008581' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1402FL0011317' and GPLFLAG = 'YES' or
FINREFERENCE = 'GHF1001FL0000716' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1001FT0000730' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1401FL0011408' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1401FL0010730' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1301FL0012788' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1002FL0000464' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1002FL0005781' and GPLFLAG = 'YES' or
FINREFERENCE = 'GHF1001FL0014495' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1401FL0014668' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1401FL0000603' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1101FL0002025' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1002FL0000052' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1002FL0016411' and GPLFLAG = 'YES' or
FINREFERENCE = 'GHF1401FL0016645' and GPLFLAG = 'YES' or
FINREFERENCE = 'GHF1003FL0016844' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1002FL0005364' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1002FL0006516' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1002FL0017100' and GPLFLAG = 'NO'; 
--FINREFERENCE = 'GHF1002FL0008123' and TRIM(LOAN_PURPOSE) = 'Flexi Loan Others';

Update VSJ4inter
SET FINBRANCH = 'Bangalore'
where FINREFERENCE = 'GHF1001HL0007181';

Update VSJ4inter
SET ROI = '6.6'
WHERE FINREFERENCE = 'GHF1401HL0006389';

Update VSJ4inter
SET STATUS = 'Booked', DETAILED_STATUS = 'Booked', QUEUE = 'Disbursement Queue'
where FINREFERENCE = 'GHF1401HT0001110';

drop table VSJ4_GHF;
create table VSJ4_GHF as (select * from VSJ4inter);
--select * from VSJ4_GHF

-- GLF PLF VSJ4
create or Replace view GFL_PLF.PUBLIC.MIS_CREDIT_LOAN_STATUS_VIEW3 as
select DISTINCT GFL_PLF.PUBLIC.MIS_CREDIT_LOAN_STATUS_VIEW.* from GFL_PLF.PUBLIC.TAT_NEW_DATA2 left join
GFL_PLF.PUBLIC.MIS_CREDIT_LOAN_STATUS_VIEW on LAN = LANID
where CUSTOMER_CATEGORY = 'Applicant';

--SELECT * FROM GFL_PLF.PUBLIC.MIS_CREDIT_LOAN_STATUS_VIEW;

drop table GFL_PLF.PUBLIC.V_TAT_DATA;
create table GFL_PLF.PUBLIC.V_TAT_DATA as 
select distinct * from GFL_PLF.PUBLIC.TAT_NEW_DATA2; 
delete from GFL_PLF.PUBLIC.V_TAT_DATA 
where LAN = 'GHF1401HL0000252' and LOANAMOUNT = 495000000;

--SELECT * FROM TAT_NEW_DATA2;


DROP TABLE GFL_PLF.PUBLIC.GPLFLAGLOOKUPTABLE;
CREATE TABLE GFL_PLF.PUBLIC.GPLFLAGLOOKUPTABLE
AS
(
select distinct lanid,
CASE WHEN UPPER(PROJECTNAME) LIKE '%GODREJ%' OR UPPER(PROJECTNAME) LIKE '%TREES%' THEN 'YES'
WHEN PROJECTNAME is null AND (GPLFLAG <> 'NO' or GPLFLAG is null) THEN 'YES'
WHEN GPLFLAG is null THEN 'YES'
else GPLFLAG end as GPLFLAG
from GFL_PLF.PUBLIC.MIS_CREDIT_LOAN_STATUS_VIEW3
where (lanid like'%HL%' or lanid like'%HT%' or lanid like'%LT%')
  
union all

select distinct a.lanid,B.gplflag
from GFL_PLF.PUBLIC.MIS_CREDIT_LOAN_STATUS_VIEW3 a
inner join
(
select distinct cif,
CASE WHEN UPPER(PROJECTNAME) LIKE '%GODREJ%' OR UPPER(PROJECTNAME) LIKE '%TREES%' THEN 'YES'
WHEN PROJECTNAME is null AND (GPLFLAG <> 'NO' or GPLFLAG is null) THEN 'YES'
WHEN GPLFLAG is null THEN 'YES'
else GPLFLAG end as GPLFLAG
from GFL_PLF.PUBLIC.MIS_CREDIT_LOAN_STATUS_VIEW3
where lanid like'%HL%' or lanid like'%HT%'
)b
on a.cif = b.cif and (a.lanid like'%FL%' or a.lanid like'%FT%')
);

--SELECT * FROM GFL_PLF.PUBLIC.LOAN_DATA3
--SELECT * FROM GFL_PLF.PUBLIC.MIS_INSURANCE_V

drop table GFL_PLF.PUBLIC.V_INSURANCE_DUMP;
create table GFL_PLF.PUBLIC.V_INSURANCE_DUMP
as
select LANID, sum(NET_PREMIUM) 
as NET_PREMIUM
from (select distinct LANID,VASREFERECE,NET_PREMIUM,INSURANCE_CODE,INSURANCE_TYPE,LOAN_ACTIVE_STATUS ,NBFC_FLAG from GFL_PLF.PUBLIC.MIS_INSURANCE_V)
group By LANID,LOAN_ACTIVE_STATUS
having LOAN_ACTIVE_STATUS ='Active';

drop table GFL_PLF.PUBLIC.V_PO;
create table GFL_PLF.PUBLIC.V_PO as
select distinct * from GFL_PLF.PUBLIC.MIS_LOAN_OUTSTANDING_VIEW;
Delete from GFL_PLF.PUBLIC.V_PO
where LOAN_NUMBER = 'GHF1001FL0000912'
or LOAN_NUMBER = 'GHF1101HL0000251';

drop table GFL_PLF.PUBLIC.V_FINDISBURSEMENTDETAILS;
create table GFL_PLF.PUBLIC.V_FINDISBURSEMENTDETAILS as 
select distinct * from GFL_PLF.PUBLIC.FINDISBURSEMENTDETAILS; ---'N' NBFC FLAG
Delete from GFL_PLF.PUBLIC.V_FINDISBURSEMENTDETAILS
where FINREFERENCE = 'GHF1001FL0000912'
or FINREFERENCE = 'GHF1101HL0000251';

drop table GFL_PLF.PUBLIC.FIRSTDISB;
create table GFL_PLF.PUBLIC.FIRSTDISB as 
select  FINREFERENCE,DISBDATE,MONTH(DISBDATE) as FIRSTMONTHDISB, DISBAMOUNT/1000000000 as FIRSTDISBAMOUNT  
from GFL_PLF.PUBLIC.V_FINDISBURSEMENTDETAILS
where DISBSEQ = 1; 
drop table GFL_PLF.PUBLIC.MAXDISB;
create table GFL_PLF.PUBLIC.MAXDISB as 
select FINREFERENCE,Max(DISBDATE) as MAXDISBDATE,sum(DISBAMOUNT/1000000000)  as MAXDISBAMOUNT,MAX(DISBSEQ) as MAXDISBSEQ 
from GFL_PLF.PUBLIC.V_FINDISBURSEMENTDETAILS
group by FINREFERENCE;
drop table GFL_PLF.PUBLIC.TOTALDISB;
create table GFL_PLF.PUBLIC.TOTALDISB as
select FINREFERENCE,sum(DISBAMOUNT/1000000000) as TOTALDISBAMOUNT 
from GFL_PLF.PUBLIC.V_FINDISBURSEMENTDETAILS
group by FINREFERENCE;

DROP TABLE GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW;
CREATE TABLE GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW
as
SELECT distinct A.FINREFERENCE, NEXTROLECODE, ROLECODE, RECORDSTATUS, FINSOURCEID, B.LOAN_STATUS,C.FINBRANCH,
CASE WHEN FINSOURCEID = 'APIUSER' AND D.FIRST_DDE IS NOT NULL THEN D.FIRST_DDE
ELSE D.FIRST_QDE
END as LOGIN_DATE
FROM GFL_PLF.PUBLIC.MIS_FINANCE_VIEW A
LEFT JOIN GFL_PLF.PUBLIC.MIS_DISBURSEMENT_NEW_VIEW B
ON A.FINREFERENCE=B.FINREFERENCE
LEFT JOIN GFL_PLF.PUBLIC.LOAN_DATA3 C on C.FINREFERENCE = A.FINREFERENCE
LEFT JOIN GFL_PLF.PUBLIC.V_TAT_DATA D
ON A.FINREFERENCE = D.LAN;

Update GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW
SET FINBRANCH = 'Delhi'
where FINBRANCH = 'Gurgaon';
Update GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW
SET FINBRANCH = 'Bangalore'
where FINBRANCH = 'Bangalore (MG Road)';
Update GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW
SET FINBRANCH = 'Bangalore'
where FINBRANCH = 'Banglore (Sahakar Nagar)';
Update GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW
SET FINBRANCH = 'Pune'
where FINBRANCH = 'Aundh BO (Pune)';
Update GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW
SET FINBRANCH = 'Delhi'
where FINBRANCH = 'Noida';
Update GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW
SET FINBRANCH = 'Mumbai'
where FINBRANCH = 'Mumbai HO';
Update GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW
SET FINBRANCH = 'Mumbai'
where FINBRANCH = 'Thane';
drop table GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW1;
create table GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW1 as 
select * from GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW;
Update GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW1
set LOAN_STATUS = 'NULL' where LOAN_STATUS is NULL;
Update GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW1
set NEXTROLECODE = 'NULL' where NEXTROLECODE = '';
Update GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW1
set ROLECODE = 'NULL' where ROLECODE = '';
Update GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW1
set RECORDSTATUS = 'NULL' where RECORDSTATUS = '';
Update GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW1
set FINSOURCEID = 'NULL' where FINSOURCEID is null;

DROP TABLE GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW_wLoanStatus1; 
CREATE TABLE GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW_wLoanStatus1 AS
select distinct A.FINREFERENCE,trim(A.NEXTROLECODE) as NEXTROLECODE,trim(A.ROLECODE) as ROLECODE,trim(A.RECORDSTATUS) as RECORDSTATUS
,trim(A.FINSOURCEID) as FINSOURCEID,
trim(A.LOAN_STATUS) as LOAN_STATUS ,A.FINBRANCH,A.LOGIN_DATE,
coalesce(b.detailed_status, c.detailed_status,
case
when a.recordstatus ='Approved' and loan_status = 'Active'
then 'Booked'
when a.recordstatus ='Approved' and loan_status = 'Close'
then 'Post disbursement cancellation'
when a.recordstatus ='Cancelled'
then 'Cancelled'
end) as DETAILED_STATUS,d.STATUS,d.QUEUE
from GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW1 A
left join SAMPLE_DB.PUBLIC.v_nextrolestatus b on a.nextrolecode = b.nextrolecode
left join SAMPLE_DB.PUBLIC.v_rolestatus c on a.rolecode = c.rolecode and a.recordstatus = c.recordstatus and a.nextrolecode = 'NULL'
left join SAMPLE_DB.PUBLIC.DS_STATUS_QUEUE_MAPPING d on
coalesce(b.detailed_status, c.detailed_status,
case
when a.recordstatus ='Approved' and loan_status = 'Active'
then 'Booked'
when a.recordstatus ='Approved' and loan_status = 'Close'
then 'Post disbursement cancellation'
when a.recordstatus ='Cancelled'
then 'Cancelled'
end) = d.DETAILED_STATUS;

SET yesterday = TO_DATE(CONVERT_TIMEZONE('Asia/Kolkata',CURRENT_TIMESTAMP()))-1;
DROP TABLE GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1;
CREATE TABLE GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
AS
SELECT distinct A.*,C.FIRST_PSV,C.FIRST_ENTRY_TO_COLLATERAL,C.FIRST_REJECT_DATE,G.LOAN_PURPOSE, D.FINTYPE AS FINTYPE_TECH,
CASE WHEN TRIM(LOAN_PURPOSE)IN ('LAP Balance Transfer plus Top-up','Loan against Property',
                                                     'Industrial LAP Balance Transfer','Industrial LAP Balance Transfer plus Top-up',
                                                     'LAP Balance Transfer','Loan against industrial property','LAP Top Up') THEN 'LP'
--WHEN TRIM(LOAN_PURPOSE) IN ('LAP Top Up') THEN 'LT'                                                 
else FINTYPE_TECH                                                           
end as FINTYPE,
D.REQLOANAMT,D.CALCULATEDRATE as ROI,
G.FINALLOANAMOUNT,H.DISB_AMOUNT,H.LOAN_AMOUNT as Booked_Amount,H.DISB_AMOUNT as DISBURSED_AMOUNT,I.TOTALPRIBAL as PRINCIPAL_OUTSTANDING,
J.DISBDATE as BOOKING_DATE, G.EMPLOYMENT_TYPE, K.CRE, G.RESIDENTIAL_STATUS, G.PROJECTID, G.PROJECTNAME, P.GPLFLAG
FROM GFL_PLF.PUBLIC.SJCron_MIS_FINANCE_VIEW_WLOANSTATUS1 A
LEFT JOIN GFL_PLF.PUBLIC.V_TAT_DATA C
ON A.FINREFERENCE = C.LAN
LEFT join GFL_PLF.PUBLIC.MIS_FINANCE_VIEW D on D.FINREFERENCE = A.FINREFERENCE
LEFT join GFL_PLF.PUBLIC.MIS_CREDIT_LOAN_STATUS_VIEW3 G on G.LANID = A.FINREFERENCE 
Left JOIN GFL_PLF.PUBLIC.MIS_DISBURSEMENT_NEW_VIEW H on H.FINREFERENCE = A.FINREFERENCE
Left join GFL_PLF.PUBLIC.V_PO I on I.LOAN_NUMBER = A.FINREFERENCE
left join (select FINREFERENCE,DISBDATE from GFL_PLF.PUBLIC.V_FINDISBURSEMENTDETAILS where DISBSEQ = 1) J on J.FINREFERENCE = A.FINREFERENCE
left join (SELECT DISTINCT LAN, PEP, CRE FROM GFL_PLF.PUBLIC.MIS_LOAN_LEVEL_DETAILS_VIEW) K ON A.FINREFERENCE=K.LAN
left join (SELECT DISTINCT LANID, GPLFLAG FROM GFL_PLF.PUBLIC.GPLFLAGLOOKUPTABLE) P ON A.FINREFERENCE = P.LANID;


DELETE FROM GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1 A
where FINREFERENCE in (select LAN from SAMPLE_DB.PUBLIC.ERRORLAN);


Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set LOGIN_DATE = CONCAT('2022-04-30',' ',TIME(LOGIN_DATE)) 
where (TO_DATE(LOGIN_DATE) BETWEEN '2022-05-01' and '2022-05-03');
Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_PSV = CONCAT('2022-04-30',' ',TIME(FIRST_PSV)) 
where (TO_DATE(FIRST_PSV) BETWEEN '2022-05-01' and '2022-05-03');
Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_ENTRY_TO_COLLATERAL = CONCAT('2022-04-30',' ',TIME(FIRST_ENTRY_TO_COLLATERAL)) 
where (TO_DATE(FIRST_ENTRY_TO_COLLATERAL) BETWEEN '2022-05-01' and '2022-05-03');
Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_REJECT_DATE = CONCAT('2022-04-30',' ',TIME(FIRST_REJECT_DATE)) 
where (TO_DATE(FIRST_REJECT_DATE) BETWEEN '2022-05-01' and '2022-05-03');

Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set LOGIN_DATE = CONCAT('2022-06-30',' ',TIME(LOGIN_DATE)) 
where (TO_DATE(LOGIN_DATE) BETWEEN '2022-07-01' and '2022-07-02');
Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_PSV = CONCAT('2022-06-30',' ',TIME(FIRST_PSV)) 
where (TO_DATE(FIRST_PSV) BETWEEN '2022-07-01' and '2022-07-02');
Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_ENTRY_TO_COLLATERAL = CONCAT('2022-06-30',' ',TIME(FIRST_ENTRY_TO_COLLATERAL)) 
where (TO_DATE(FIRST_ENTRY_TO_COLLATERAL) BETWEEN '2022-07-01' and '2022-07-02');
Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_REJECT_DATE = CONCAT('2022-06-30',' ',TIME(FIRST_REJECT_DATE)) 
where (TO_DATE(FIRST_REJECT_DATE) BETWEEN '2022-07-01' and '2022-07-02');

Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set LOGIN_DATE = CONCAT('2022-08-31',' ',TIME(LOGIN_DATE)) 
where (TO_DATE(LOGIN_DATE) BETWEEN '2022-09-01' and '2022-09-02');
Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_PSV = CONCAT('2022-08-31',' ',TIME(FIRST_PSV)) 
where (TO_DATE(FIRST_PSV) BETWEEN '2022-09-01' and '2022-09-02');
Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_ENTRY_TO_COLLATERAL = CONCAT('2022-08-31',' ',TIME(FIRST_ENTRY_TO_COLLATERAL)) 
where (TO_DATE(FIRST_ENTRY_TO_COLLATERAL) BETWEEN '2022-09-01' and '2022-09-02');
Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_REJECT_DATE = CONCAT('2022-08-31',' ',TIME(FIRST_REJECT_DATE)) 
where (TO_DATE(FIRST_REJECT_DATE) BETWEEN '2022-09-01' and '2022-09-02');

Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set LOGIN_DATE = CONCAT('2022-09-30',' ',TIME(LOGIN_DATE)) 
where (TO_DATE(LOGIN_DATE) = '2022-10-01');
Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_PSV = CONCAT('2022-09-30',' ',TIME(FIRST_PSV)) 
where (TO_DATE(FIRST_PSV) = '2022-10-01');
Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_ENTRY_TO_COLLATERAL = CONCAT('2022-09-30',' ',TIME(FIRST_ENTRY_TO_COLLATERAL)) 
where (TO_DATE(FIRST_ENTRY_TO_COLLATERAL) = '2022-10-01');
Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_REJECT_DATE = CONCAT('2022-09-30',' ',TIME(FIRST_REJECT_DATE)) 
where (TO_DATE(FIRST_REJECT_DATE) = '2022-10-01');

Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set LOGIN_DATE = CONCAT('2022-10-31',' ',TIME(LOGIN_DATE)) 
where (TO_DATE(LOGIN_DATE) BETWEEN '2022-11-01' and '2022-11-04');
Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_PSV = CONCAT('2022-10-31',' ',TIME(FIRST_PSV)) 
where (TO_DATE(FIRST_PSV) BETWEEN '2022-11-01' and '2022-11-04');
Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_ENTRY_TO_COLLATERAL = CONCAT('2022-10-31',' ',TIME(FIRST_ENTRY_TO_COLLATERAL)) 
where (TO_DATE(FIRST_ENTRY_TO_COLLATERAL) BETWEEN '2022-11-01' and '2022-11-04');
Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
set FIRST_REJECT_DATE = CONCAT('2022-10-31',' ',TIME(FIRST_REJECT_DATE)) 
where (TO_DATE(FIRST_REJECT_DATE) BETWEEN '2022-11-01' and '2022-11-04');

Update GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1
SET BOOKING_DATE = '2022-04-01'
WHERE FINREFERENCE = 'GHF1002HL0010862' OR
FINREFERENCE = 'GHF1002FL0010865' OR
FINREFERENCE = 'GHF1002HL0010527' OR
FINREFERENCE = 'GHF1002HL0010885' OR
FINREFERENCE = 'GHF1002FL0010994' OR
FINREFERENCE = 'GHF1003HL0010367' OR
FINREFERENCE = 'GHF1003FL0010946' OR
FINREFERENCE = 'GHF1002HL0010399' OR
FINREFERENCE = 'GHF1002HT0010434' OR
FINREFERENCE = 'GHF1003HL0009576' OR
FINREFERENCE = 'GHF1002HL0010722' OR
FINREFERENCE = 'GHF1002HL0010827';


drop table GFL_PLF.PUBLIC.SJCRON_APPROVALDATES;
create table GFL_PLF.PUBLIC.SJCRON_APPROVALDATES
as 
select distinct LOAN_ACCOUNTNO, APPROVAL_DATE
from GFL_PLF.PUBLIC.MIS_DISBURSEMENT_VIEW;

drop table GFL_PLF.PUBLIC.VSJ4inter;
CREATE TABLE GFL_PLF.PUBLIC.VSJ4inter AS 
select distinct A.*,B.NET_PREMIUM,
Month(LOGIN_DATE) as LOGIN_MONTH, CONCAT(YEAR(LOGIN_DATE),'-',MONTH(LOGIN_DATE)) LOGIN_YEAR_MONTH,
MONTH(FIRST_PSV) as FS_MONTH, CONCAT(YEAR(FIRST_PSV),'-',MONTH(FIRST_PSV)) FS_YEAR_MONTH,
MONTH(BOOKING_DATE) as BOOKING_MONTH, CONCAT(YEAR(BOOKING_DATE),'-',MONTH(BOOKING_DATE)) BOOK_YEAR_MONTH,
MONTH(FIRST_ENTRY_TO_COLLATERAL) as IS_MONTH, CONCAT(YEAR(FIRST_ENTRY_TO_COLLATERAL),'-',MONTH(FIRST_ENTRY_TO_COLLATERAL)) IS_YEAR_MONTH,
MONTH(FIRST_REJECT_DATE) as REJECT_MONTH, CONCAT(YEAR(FIRST_REJECT_DATE),'-',MONTH(FIRST_REJECT_DATE)) REJECT_YEAR_MONTH,
case when A.STATUS='QDE_Cancelled' THEN 'B) QDE_Cancelled'
ELSE 'A) Login'
END AS LOGINSTATUS,
case when A.STATUS in ('Sanction','Booked','Cancelled') then 'A) Final Sanction'
when STATUS in ('Rejected') then 'B) Rejected'
when A.STATUS in ('Income Sanction') then 'C) Income Sanction'
when A.STATUS in ('QDE_Cancelled') then 'D) QDE_Cancelled'
else 'WIP'
end as STATUS_SEG,
CASE WHEN FINTYPE IN ('LP','NP') THEN 'NIL'

WHEN GPLFLAG = 'NO' THEN 'NON GPL' 
ELSE 'GPL'
END AS GPLFLAG_SANCTIONS,
CASE WHEN FINTYPE IN ('LP','NP') THEN 'NIL'

WHEN GPLFLAG='NO' THEN 'NON GPL' 
ELSE 'GPL' 
END AS GPLFLAG2,
case when A.FINTYPE in ('FL','FT') then 'C) Unsecured'
when A.FINTYPE in ('HL') then 'A) HL' --LAP FINTYPE ADDED
when A.FINTYPE in ('HT','LT') then 'B) BT + Topup'
when A.FINTYPE in ('LP') then 'D) LP'
when A.FINTYPE in ('NP') then 'E) NP'
else 'F) Unknown'
end as FINTYPE_SEG,

X.FIRSTDISBAMOUNT,Y.MAXDISBAMOUNT,Z.TOTALDISBAMOUNT,
(Booked_Amount*ROI) as WROI,'Y' NBFC_FLAG
from GFL_PLF.PUBLIC.VSJ3Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2_1 A
left join GFL_PLF.PUBLIC.SJCRON_APPROVALDATES E
on E.LOAN_ACCOUNTNO = A.FINREFERENCE
left join GFL_PLF.PUBLIC.V_INSURANCE_DUMP B
on B.LANID = A.FINREFERENCE
left join GFL_PLF.PUBLIC.FIRSTDISB X on X.FINREFERENCE = A.FINREFERENCE
left join GFL_PLF.PUBLIC.MAXDISB Y on Y.FINREFERENCE = A.FINREFERENCE
left join GFL_PLF.PUBLIC.TOTALDISB Z on Z.FINREFERENCE = A.FINREFERENCE;
Delete from GFL_PLF.PUBLIC.VSJ4inter
where FINREFERENCE = 'GHF1401HL0000252' and FINALLOANAMOUNT = '4950000' or
FINREFERENCE = 'GHF1001HL0008788' and FINALLOANAMOUNT = '700000' or
FINREFERENCE = 'GHF1501FL0007213' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1401FT0001111' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1301FT0008542' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1401FT0007841' and GPLFLAG = 'YES' or
FINREFERENCE = 'GHF1002FL0003530' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1101FL0004629' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1001FL0005749' and GPLFLAG = 'YES' or
FINREFERENCE = 'GHF1401FT0005341' and GPLFLAG = 'YES' or
FINREFERENCE = 'GHF1402FL0006916' and GPLFLAG = 'YES' or
FINREFERENCE = 'GHF1002FT0008293' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1101FL0010221' and GPLFLAG = 'NO' or
FINREFERENCE = 'GHF1101FL0010284' and GPLFLAG = 'YES' or
FINREFERENCE = 'GHF1002FL0008581' and GPLFLAG = 'NO' or
FINREFERENCE = 'GFL3003LP0000154' and TRIM(LOAN_PURPOSE) is NULL or
FINREFERENCE = 'GFL3101LP0000151' and TRIM(LOAN_PURPOSE) is NULL or
FINREFERENCE = 'GFL3001LP0000146' and TRIM(LOAN_PURPOSE) is NULL or
FINREFERENCE = 'GFL3401LP0000167' and TRIM(LOAN_PURPOSE) is NULL or
FINREFERENCE = 'GFL3003LP0000148' and TRIM(LOAN_PURPOSE) is NULL or
FINREFERENCE = 'GFL3401LP0000157' and TRIM(LOAN_PURPOSE) is NULL or
FINREFERENCE = 'GFL3101LP0000153' and TRIM(LOAN_PURPOSE) is NULL or
FINREFERENCE = 'GFL3401LP0000161' and TRIM(LOAN_PURPOSE) is NULL or
FINREFERENCE = 'GFL3401LP0000166' and TRIM(LOAN_PURPOSE) is NULL or
FINREFERENCE = 'GFL3101LP0000155' and TRIM(LOAN_PURPOSE) is NULL or
FINREFERENCE = 'GFL3101LP0000147' and TRIM(LOAN_PURPOSE) is NULL or
FINREFERENCE = 'GFL3001LP0000152' and TRIM(LOAN_PURPOSE) is NULL or
FINREFERENCE = 'GFL3001LP0000165' and TRIM(LOAN_PURPOSE) is NULL or
FINREFERENCE = 'GFL3001LP0000164' and TRIM(LOAN_PURPOSE) is NULL or
FINREFERENCE = 'GFL3101LP0000069' and PROJECTID is NULL or
FINREFERENCE = 'GFL3501NP0000063' and FINALLOANAMOUNT = '4000000' or
FINREFERENCE = 'GFL3001NP0000103' and FINALLOANAMOUNT = '5500000' or
FINREFERENCE = 'GFL3003NP0000114' and FINALLOANAMOUNT = '100000' or
--FINREFERENCE = 'GFL3001NP0000081' and PROJECTNAME is NULL or
FINREFERENCE = 'GHF1402FL0011317' and GPLFLAG = 'YES' or
FINREFERENCE = 'GFL3401LP0000361' and PROJECTID is NULL;

Update VSJ4inter
SET FINBRANCH = 'Bangalore'
where FINREFERENCE = 'GHF1001HL0007181';


drop table GFL_PLF.PUBLIC.VSJ4_NBFC;
create table GFL_PLF.PUBLIC.VSJ4_NBFC as (select * from GFL_PLF.PUBLIC.VSJ4inter);
--select distinct * from GFL_PLF.PUBLIC.VSJ4_NBFC WHERE GPLFLAG_SANCTIONS = 'GPL'

drop table VSJ4;
create table VSJ4 as 
(SELECT * FROM SAMPLE_DB.PUBLIC.VSJ4_GHF
UNION ALL
SELECT * FROM GFL_PLF.PUBLIC.VSJ4_NBFC);
--select * from vsj4;

drop table V_FINDISBURSEMENTDETAILS;
create table V_FINDISBURSEMENTDETAILS as 
(SELECT FINREFERENCE,DISBDATE,DISBSEQ,DISBDESC,DISBACCOUNTID,DISBAMOUNT,FEECHARGEAMT,DISBREQDATE,DISBDISBURSED,DISBISACTIVE,DISBREMARKS,LINKEDTRANID,DISBTYPE,DISBCLAIM,DISBEXPTYPE,DISBRETPERC,DISBRETAMOUNT,AUTODISB,NETADVDUE,NETRETDUE,DISBRETPAID,RETPAIDDATE,VERSION,LASTMNTBY,LASTMNTON,RECORDSTATUS,ROLECODE,NEXTROLECODE,TASKID,NEXTTASKID,RECORDTYPE,WORKFLOWID,CONSULTFEEFRQ,CONSULTFEESTARTDATE,CONSULTFEEENDDATE,CONTRACTORID,INSURANCEAMT,DISBSTATUS,INSTRUCTIONUID,QUICKDISB,'N' NBFC_FLAG,LAST_UPDATED 
 from SV_FINDISBURSEMENTDETAILS
UNION 
SELECT * from GFL_PLF.PUBLIC.FINDISBURSEMENTDETAILS);

--select distinct * from VSJ4 where Detailed_status is null
--select distinct * from VSJ4 where FINREFERENCE = 'GHF1003HL0008044'
--DISB SUMMARY

SET yesterday = TO_DATE(CONVERT_TIMEZONE('Asia/Kolkata',CURRENT_TIMESTAMP()))-1;
SET today = TO_DATE(CONVERT_TIMEZONE('Asia/Kolkata',CURRENT_TIMESTAMP()));
SET WeekNow = Week($today);
SET MonthNow = Month($today);
SET MonthPrev = Month(add_months($today, -1));
SET DateNow = Day($today);

drop table YTD_DISB;
create table YTD_DISB as
select distinct A.FINREFERENCE,A.DISBSEQ,B.FINBRANCH,B.FINTYPE_SEG,B.GPLFLAG_SANCTIONS,sum(A.DISB) as DISB,
case when A.DISBSEQ = 1 then sum(B.NET_PREMIUM)/10000000 
else 0
end  as TOTAL_PREMIUM,'YTD' TIMELINE
from (select FINREFERENCE,sum(DISBAMOUNT)/1000000000 as DISB,DISBSEQ from V_FINDISBURSEMENTDETAILS
      where DISBDATE > TO_DATE('31/03/22','DD/MM/YY') and DISBDATE <= $yesterday
     group by FINREFERENCE,DISBSEQ) A
left join  VSJ4 B on A.FINREFERENCE = B.FINREFERENCE
group by A.FINREFERENCE,B.FINTYPE_SEG,B.GPLFLAG_SANCTIONS,B.FINBRANCH,A.DISBSEQ;

drop table FTD_DISB;
create table FTD_DISB as
select distinct A.FINREFERENCE,A.DISBSEQ,B.FINBRANCH,B.FINTYPE_SEG,B.GPLFLAG_SANCTIONS,sum(A.DISB) as DISB,
case when A.DISBSEQ = 1 then sum(B.NET_PREMIUM)/10000000 
else 0
end  as TOTAL_PREMIUM,'FTD' TIMELINE
from (select FINREFERENCE,sum(DISBAMOUNT)/1000000000 as DISB,DISBSEQ from V_FINDISBURSEMENTDETAILS
      where DISBDATE = $yesterday  
     group by FINREFERENCE,DISBSEQ
     ) A
left join  VSJ4 B on A.FINREFERENCE = B.FINREFERENCE
group by A.FINREFERENCE,B.FINTYPE_SEG,B.GPLFLAG_SANCTIONS,B.FINBRANCH,A.DISBSEQ; 

drop table WTD_DISB;
create table WTD_DISB as
select distinct A.FINREFERENCE,A.DISBSEQ,B.FINBRANCH,B.FINTYPE_SEG,B.GPLFLAG_SANCTIONS,sum(A.DISB) as DISB,
case when A.DISBSEQ = 1 then sum(B.NET_PREMIUM)/10000000 
else 0
end  as TOTAL_PREMIUM,'WTD' TIMELINE
from (select FINREFERENCE,sum(DISBAMOUNT)/1000000000 as DISB,DISBSEQ from V_FINDISBURSEMENTDETAILS
     where WEEK(DISBDATE) = $WeekNow AND YEAR(DISBDATE)=YEAR($today) and DISBDATE <= $yesterday
     group by FINREFERENCE,DISBSEQ
     ) A
left join  VSJ4 B on A.FINREFERENCE = B.FINREFERENCE
group by A.FINREFERENCE,B.FINTYPE_SEG,B.GPLFLAG_SANCTIONS,B.FINBRANCH,A.DISBSEQ;

drop table MTD_DISB;
create table MTD_DISB as
select distinct A.FINREFERENCE,A.DISBSEQ,B.FINBRANCH,B.FINTYPE_SEG,B.GPLFLAG_SANCTIONS,sum(A.DISB) as DISB,
case when A.DISBSEQ = 1 then sum(B.NET_PREMIUM)/10000000 
else 0
end  as TOTAL_PREMIUM,'MTD' TIMELINE
from (select FINREFERENCE,sum(DISBAMOUNT)/1000000000 as DISB,DISBSEQ from V_FINDISBURSEMENTDETAILS
      where Month(DISBDATE)=$MonthNow AND YEAR(DISBDATE)=YEAR($today) and DISBDATE <= $yesterday
     group by FINREFERENCE,DISBSEQ
     ) A
left join  VSJ4 B on A.FINREFERENCE = B.FINREFERENCE
group by A.FINREFERENCE,B.FINTYPE_SEG,B.GPLFLAG_SANCTIONS,B.FINBRANCH,A.DISBSEQ;

SET DateNow1 = Day($today);
drop table MTDPrev_DISB;
create table MTDPrev_DISB as 
select distinct A.FINREFERENCE,A.DISBSEQ,B.FINBRANCH,B.FINTYPE_SEG,B.GPLFLAG_SANCTIONS,sum(A.DISB) as DISB,
case when A.DISBSEQ = 1 then sum(B.NET_PREMIUM)/10000000 
else 0
end  as TOTAL_PREMIUM,'MTDPrev' TIMELINE
from (select FINREFERENCE,sum(DISBAMOUNT)/1000000000 as DISB,DISBSEQ from V_FINDISBURSEMENTDETAILS
     where Month(DISBDATE)=$MonthPrev AND YEAR(DISBDATE)=YEAR($today) and Day(DISBDATE)<$DateNow1
     group by FINREFERENCE,DISBSEQ
     ) A
left join  VSJ4 B on A.FINREFERENCE = B.FINREFERENCE
group by A.FINREFERENCE,B.FINTYPE_SEG,B.GPLFLAG_SANCTIONS,B.FINBRANCH,A.DISBSEQ;

drop table FMTD_DISB;
create table FMTD_DISB as
select A.FINREFERENCE,A.DISBSEQ,B.FINBRANCH,B.FINTYPE_SEG,B.GPLFLAG_SANCTIONS,sum(A.DISB) as DISB,
case when A.DISBSEQ = 1 then sum(B.NET_PREMIUM)/10000000 
else 0
end  as TOTAL_PREMIUM,'MTDFunnel' TIMELINE
from (select FINREFERENCE,sum(DISBAMOUNT)/1000000000 as DISB,DISBSEQ from V_FINDISBURSEMENTDETAILS
     where Month(DISBDATE)=$MonthNow AND YEAR(DISBDATE)=YEAR($today) and DISBDATE <= $yesterday
     group by FINREFERENCE,DISBSEQ
     ) A
left join  VSJ4 B on A.FINREFERENCE = B.FINREFERENCE
where Month(B.LOGIN_DATE)=$MonthNow
group by A.FINREFERENCE,B.FINTYPE_SEG,B.GPLFLAG_SANCTIONS,B.FINBRANCH,A.DISBSEQ;

drop table DISB_UNION;
create table DISB_UNION as 
(
select * from YTD_DISB
Union All
select * from MTD_DISB
Union All
select * from MTDPrev_DISB
UNION ALL
select * from FMTD_DISB
Union All
select * from WTD_DISB
union All
select * from FTD_DISB
);

drop table LOS_DISB;
create table LOS_DISB as 
select A.*,sum(B.DISB) as DISB,sum(TOTAL_PREMIUM) as TOTAL_PREMIUM
from TABLELOS_NEW_3 A 
left join DISB_UNION B on A.TIMELINE = B.TIMELINE and A.FINBRANCH = B.FINBRANCH and A.FINTYPE_SEG = B.FINTYPE_SEG 
and A.GPLFLAG = B.GPLFLAG_SANCTIONS
group by A.TIMELINE,A.GPLFLAG,A.FINTYPE_SEG,A.FINBRANCH  
order by 
A.TIMELINE,A.GPLFLAG,A.FINTYPE_SEG,A.FINBRANCH; 

drop table LOS_YTD_Logins;
create table LOS_YTD_Logins as
select GPLFLAG2,FINTYPE_SEG,FINBRANCH,count(*) as Logins ,sum(REQLOANAMT)/1000000000 Logins_Amount
from VSJ4 
where LOGINSTATUS ='A) Login' and TO_DATE(LOGIN_DATE) > TO_DATE('31/03/22','DD/MM/YY') and TO_DATE(LOGIN_DATE)<=$yesterday
group by GPLFLAG2,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG2,FINTYPE_SEG,FINBRANCH;
drop table LOS_YTD_FINAL_SANCTIONS;
create table LOS_YTD_FINAL_SANCTIONS as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as FINAL_SANCTIONS ,sum(FINALLOANAMOUNT)/10000000 FINAL_SANCTIONS_Amount
from VSJ4
where STATUS_SEG ='A) Final Sanction'  and TO_DATE(FIRST_PSV) > TO_DATE('31/03/22','DD/MM/YY') and TO_DATE(FIRST_PSV)<=$yesterday
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH  
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_YTD_INCOME_SANCTIONS;
create table LOS_YTD_INCOME_SANCTIONS as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as INCOME_SANCTIONS ,sum(FINALLOANAMOUNT)/10000000 INCOME_SANCTIONS_Amount
from VSJ4
where STATUS_SEG ='C) Income Sanction'  and TO_DATE(FIRST_ENTRY_TO_COLLATERAL) > TO_DATE('31/03/22','DD/MM/YY') and 
TO_DATE(FIRST_ENTRY_TO_COLLATERAL)<=$yesterday
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_YTD_Rejects;
create table LOS_YTD_Rejects as
select GPLFLAG2,FINTYPE_SEG,FINBRANCH,count(*) as Rejects ,sum(REQLOANAMT)/1000000000 Rejects_Amount
from VSJ4
where STATUS_SEG ='B) Rejected'  and TO_DATE(FIRST_REJECT_DATE) > TO_DATE('31/03/22','DD/MM/YY') and TO_DATE(FIRST_REJECT_DATE)<=$yesterday
group by GPLFLAG2,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG2,FINTYPE_SEG,FINBRANCH;

drop table LOS_YTD_BOOKINGS;
create table LOS_YTD_Bookings as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as Bookings ,sum(Booked_Amount)/10000000 Bookings_Amount,sum(WROI)/10000000 as WROI
from VSJ4 
where STATUS ='Booked'  and TO_DATE(BOOKING_DATE) > TO_DATE('31/03/22','DD/MM/YY') and TO_DATE(BOOKING_DATE)<=$yesterday
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH  
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_YTD;
create table LOS_YTD as
select A.GPLFLAG,A.FINTYPE_SEG,A.FINBRANCH,F.Logins,F.Logins_Amount,B.FINAL_SANCTIONS,B.FINAL_SANCTIONS_Amount,
C.Bookings,C.Bookings_Amount,C.WROI,D.Rejects,D.Rejects_Amount,
E.INCOME_SANCTIONS,E.INCOME_SANCTIONS_Amount,
'YTD' Timeline 
from TABLELOS_NEW_3 A 
left join LOS_YTD_Logins F on A.FINTYPE_SEG = F.FINTYPE_SEG and A.FINBRANCH = F.FINBRANCH and A.GPLFLAG = F.GPLFLAG2
left join LOS_YTD_FINAL_SANCTIONS B on A.FINTYPE_SEG = B.FINTYPE_SEG and A.FINBRANCH = B.FINBRANCH and A.GPLFLAG = B.GPLFLAG_SANCTIONS
left join LOS_YTD_Bookings C on A.FINTYPE_SEG = C.FINTYPE_SEG and A.FINBRANCH = C.FINBRANCH and A.GPLFLAG = C.GPLFLAG_SANCTIONS
left join LOS_YTD_Rejects D on A.FINTYPE_SEG = D.FINTYPE_SEG and A.FINBRANCH = D.FINBRANCH and A.GPLFLAG = D.GPLFLAG2
left join LOS_YTD_INCOME_SANCTIONS E on A.FINTYPE_SEG = E.FINTYPE_SEG and A.FINBRANCH = E.FINBRANCH and A.GPLFLAG = E.GPLFLAG_SANCTIONS;

SET yesterday = TO_DATE(CONVERT_TIMEZONE('Asia/Kolkata',CURRENT_TIMESTAMP()))-1;

drop table LOS_FTD_Logins;
create table LOS_FTD_Logins as
select GPLFLAG2,FINTYPE_SEG,FINBRANCH,count(*) as Logins ,sum(REQLOANAMT)/1000000000 Logins_Amount
from VSJ4
where LOGINSTATUS ='A) Login' and TO_DATE(LOGIN_DATE) = $yesterday 
group by GPLFLAG2,FINTYPE_SEG,FINBRANCH  
order by GPLFLAG2,FINTYPE_SEG,FINBRANCH;

drop table LOS_FTD_FINAL_SANCTIONS;
create table LOS_FTD_FINAL_SANCTIONS as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as FINAL_SANCTIONS ,sum(FINALLOANAMOUNT)/10000000 FINAL_SANCTIONS_Amount
from VSJ4 
where STATUS_SEG ='A) Final Sanction' and TO_DATE(FIRST_PSV) = $yesterday 
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH  
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_FTD_INCOME_SANCTIONS;
create table LOS_FTD_INCOME_SANCTIONS as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as INCOME_SANCTIONS ,sum(FINALLOANAMOUNT)/10000000 INCOME_SANCTIONS_Amount
from VSJ4
where STATUS_SEG ='C) Income Sanction' and TO_DATE(FIRST_ENTRY_TO_COLLATERAL) = $yesterday 
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_FTD_Rejects;
create table LOS_FTD_Rejects as
select GPLFLAG2,FINTYPE_SEG,FINBRANCH,count(*) as Rejects ,sum(REQLOANAMT)/1000000000 Rejects_Amount
from VSJ4
where STATUS_SEG ='B) Rejected' and TO_DATE(FIRST_REJECT_DATE) = $yesterday 
group by GPLFLAG2,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG2,FINTYPE_SEG,FINBRANCH;

drop table LOS_FTD_Bookings;
create table LOS_FTD_Bookings as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as Bookings ,sum(Booked_Amount)/10000000 Bookings_Amount,sum(WROI)/10000000 as WROI
from VSJ4
where STATUS ='Booked'  and TO_DATE(BOOKING_DATE) = $yesterday 
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_FTD;
create table LOS_FTD as
select A.GPLFLAG,A.FINTYPE_SEG,A.FINBRANCH,F.Logins,F.Logins_Amount,B.FINAL_SANCTIONS,B.FINAL_SANCTIONS_Amount,
C.Bookings,C.Bookings_Amount,C.WROI,D.Rejects,D.Rejects_Amount,
E.INCOME_SANCTIONS,E.INCOME_SANCTIONS_Amount,
'FTD' Timeline
from TABLELOS_NEW_3 A
left join LOS_FTD_LOGINS F on A.FINTYPE_SEG = F.FINTYPE_SEG and A.FINBRANCH = F.FINBRANCH and A.GPLFLAG = F.GPLFLAG2
left join LOS_FTD_FINAL_SANCTIONS B on A.FINTYPE_SEG = B.FINTYPE_SEG and A.FINBRANCH = B.FINBRANCH and A.GPLFLAG = B.GPLFLAG_SANCTIONS
left join LOS_FTD_Bookings C on A.FINTYPE_SEG = C.FINTYPE_SEG and A.FINBRANCH = C.FINBRANCH and A.GPLFLAG = C.GPLFLAG_SANCTIONS
left join LOS_FTD_Rejects D on A.FINTYPE_SEG = D.FINTYPE_SEG and A.FINBRANCH = D.FINBRANCH and A.GPLFLAG = D.GPLFLAG2
left join LOS_FTD_INCOME_SANCTIONS E on A.FINTYPE_SEG = E.FINTYPE_SEG and A.FINBRANCH = E.FINBRANCH and A.GPLFLAG = E.GPLFLAG_SANCTIONS;


SET today = TO_DATE(CONVERT_TIMEZONE('Asia/Kolkata',CURRENT_TIMESTAMP()));
SET WeekNow = Week($today);

drop table LOS_WTD_Logins;
create table LOS_WTD_Logins as
select GPLFLAG2,FINTYPE_SEG,FINBRANCH,count(*) as Logins ,sum(REQLOANAMT)/1000000000 Logins_Amount
from VSJ4
where LOGINSTATUS ='A) Login' and WEEK(LOGIN_DATE)=$WeekNow AND YEAR(LOGIN_DATE)=YEAR($today) and TO_DATE(LOGIN_DATE)<=$yesterday
group by GPLFLAG2,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG2,FINTYPE_SEG,FINBRANCH;

drop table LOS_WTD_FINAL_SANCTIONS;
create table LOS_WTD_FINAL_SANCTIONS as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as FINAL_SANCTIONS ,sum(FINALLOANAMOUNT)/10000000 FINAL_SANCTIONS_Amount
from VSJ4
where STATUS_SEG ='A) Final Sanction' and WEEK(FIRST_PSV)=$WeekNow AND YEAR(FIRST_PSV)=YEAR($today) and TO_DATE(FIRST_PSV)<=$yesterday
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH  
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_WTD_INCOME_SANCTIONS;
create table LOS_WTD_INCOME_SANCTIONS as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as INCOME_SANCTIONS ,sum(FINALLOANAMOUNT)/10000000 INCOME_SANCTIONS_Amount
from VSJ4
where STATUS_SEG ='C) Income Sanction' and WEEK(FIRST_ENTRY_TO_COLLATERAL)=$WeekNow AND YEAR(FIRST_ENTRY_TO_COLLATERAL)=YEAR($today)
and TO_DATE(FIRST_ENTRY_TO_COLLATERAL)<=$yesterday
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_WTD_Rejects;
create table LOS_WTD_Rejects as
select GPLFLAG2,FINTYPE_SEG,FINBRANCH,count(*) as Rejects ,sum(REQLOANAMT)/1000000000 Rejects_Amount
from VSJ4
where STATUS_SEG ='B) Rejected' and  WEEK(FIRST_REJECT_DATE)=$WeekNow AND YEAR(FIRST_REJECT_DATE)=YEAR($today)and TO_DATE(FIRST_REJECT_DATE)<=$yesterday
group by GPLFLAG2,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG2,FINTYPE_SEG,FINBRANCH;

drop table LOS_WTD_Bookings;
create table LOS_WTD_Bookings as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as Bookings ,sum(Booked_Amount)/10000000 Bookings_Amount,sum(WROI)/10000000 as WROI
from VSJ4 
where STATUS ='Booked' and WEEK(BOOKING_DATE)=$WeekNow AND YEAR(BOOKING_DATE)=YEAR($today)and TO_DATE(BOOKING_DATE)<=$yesterday
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH  
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_WTD;
create table LOS_WTD as
select A.GPLFLAG,A.FINTYPE_SEG,A.FINBRANCH,F.Logins,F.Logins_Amount,B.FINAL_SANCTIONS,B.FINAL_SANCTIONS_Amount,C.Bookings,C.Bookings_Amount,C.WROI,D.Rejects,D.Rejects_Amount,
E.INCOME_SANCTIONS,E.INCOME_SANCTIONS_Amount,'WTD' Timeline from TABLELOS_NEW_3 A 
left join LOS_WTD_LOGINS F on A.FINTYPE_SEG = F.FINTYPE_SEG and A.FINBRANCH = F.FINBRANCH and A.GPLFLAG = F.GPLFLAG2
left join LOS_WTD_FINAL_SANCTIONS B on A.FINTYPE_SEG = B.FINTYPE_SEG and A.FINBRANCH = B.FINBRANCH and A.GPLFLAG = B.GPLFLAG_SANCTIONS
left join LOS_WTD_Bookings C on A.FINTYPE_SEG = C.FINTYPE_SEG and A.FINBRANCH = C.FINBRANCH and A.GPLFLAG = C.GPLFLAG_SANCTIONS
left join LOS_WTD_Rejects D on A.FINTYPE_SEG = D.FINTYPE_SEG and A.FINBRANCH = D.FINBRANCH and A.GPLFLAG = D.GPLFLAG2
left join LOS_WTD_INCOME_SANCTIONS E on A.FINTYPE_SEG = E.FINTYPE_SEG and A.FINBRANCH = E.FINBRANCH and A.GPLFLAG = E.GPLFLAG_SANCTIONS ;


SET today = TO_DATE(CONVERT_TIMEZONE('Asia/Kolkata',CURRENT_TIMESTAMP()));
SET MonthNow = Month($today);
drop table LOS_MTD_Logins;
create table LOS_MTD_Logins as
select GPLFLAG2,FINTYPE_SEG,FINBRANCH,count(*) as Logins ,sum(REQLOANAMT)/1000000000 Logins_Amount
from VSJ4
where LOGINSTATUS ='A) Login' and Month(LOGIN_DATE)=$MonthNow AND YEAR(LOGIN_DATE)=YEAR($today) and TO_DATE(LOGIN_DATE)<=$yesterday
group by GPLFLAG2,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG2,FINTYPE_SEG,FINBRANCH;

drop table LOS_MTD_FINAL_SANCTIONS;
create table LOS_MTD_FINAL_SANCTIONS as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as FINAL_SANCTIONS ,sum(FINALLOANAMOUNT)/10000000 FINAL_SANCTIONS_Amount
from VSJ4
where STATUS_SEG ='A) Final Sanction' and Month(FIRST_PSV)=$MonthNow AND YEAR(FIRST_PSV)=YEAR($today)
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_MTD_INCOME_SANCTIONS;
create table LOS_MTD_INCOME_SANCTIONS as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as INCOME_SANCTIONS ,sum(FINALLOANAMOUNT)/10000000 INCOME_SANCTIONS_Amount
from VSJ4
where STATUS_SEG ='C) Income Sanction' and Month(FIRST_ENTRY_TO_COLLATERAL)=$MonthNow AND YEAR(FIRST_ENTRY_TO_COLLATERAL)=YEAR($today)
and TO_DATE(FIRST_ENTRY_TO_COLLATERAL)<=$yesterday
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_MTD_Rejects;
create table LOS_MTD_Rejects as
select GPLFLAG2,FINTYPE_SEG,FINBRANCH,count(*) as Rejects ,sum(REQLOANAMT)/1000000000 Rejects_Amount
from VSJ4
where STATUS_SEG ='B) Rejected' and  Month(FIRST_REJECT_DATE)=$MonthNow AND YEAR(FIRST_REJECT_DATE)=YEAR($today) and TO_DATE(FIRST_REJECT_DATE)<=$yesterday
group by GPLFLAG2,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG2,FINTYPE_SEG,FINBRANCH;

drop table LOS_MTD_Bookings;
create table LOS_MTD_Bookings as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as Bookings ,sum(Booked_Amount)/10000000 Bookings_Amount,sum(WROI)/10000000 as WROI
from VSJ4
where STATUS ='Booked'  and Month(BOOKING_DATE)=$MonthNow AND YEAR(BOOKING_DATE)=YEAR($today)and TO_DATE(BOOKING_DATE)<=$yesterday
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH  
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_MTD;
create table LOS_MTD as
select A.GPLFLAG,A.FINTYPE_SEG,A.FINBRANCH,F.Logins,F.Logins_Amount,B.FINAL_SANCTIONS,B.FINAL_SANCTIONS_Amount,C.Bookings,C.Bookings_Amount,C.WROI,D.Rejects,D.Rejects_Amount,
E.INCOME_SANCTIONS,E.INCOME_SANCTIONS_Amount,'MTD' Timeline from TABLELOS_NEW_3 A 
left join LOS_MTD_LOGINS F on A.FINTYPE_SEG = F.FINTYPE_SEG and A.FINBRANCH = F.FINBRANCH and A.GPLFLAG = F.GPLFLAG2
left join LOS_MTD_FINAL_SANCTIONS B on A.FINTYPE_SEG = B.FINTYPE_SEG and A.FINBRANCH = B.FINBRANCH and A.GPLFLAG = B.GPLFLAG_SANCTIONS
left join LOS_MTD_Bookings C on A.FINTYPE_SEG = C.FINTYPE_SEG and A.FINBRANCH = C.FINBRANCH and A.GPLFLAG = C.GPLFLAG_SANCTIONS
left join LOS_MTD_Rejects D on A.FINTYPE_SEG = D.FINTYPE_SEG and A.FINBRANCH = D.FINBRANCH and A.GPLFLAG = D.GPLFLAG2
left join LOS_MTD_INCOME_SANCTIONS E on A.FINTYPE_SEG = E.FINTYPE_SEG and A.FINBRANCH = E.FINBRANCH and A.GPLFLAG = E.GPLFLAG_SANCTIONS;

SET today = TO_DATE(CONVERT_TIMEZONE('Asia/Kolkata',CURRENT_TIMESTAMP()));
SET MonthPrev = Month(add_months($today,-1));
SET DateNow = Day($today);

drop table LOS_PMTD_Logins;
create table LOS_PMTD_Logins as
select GPLFLAG2,FINTYPE_SEG,FINBRANCH,count(*) as Logins ,sum(REQLOANAMT)/1000000000 Logins_Amount
from VSJ4 
where LOGINSTATUS ='A) Login' and Month(LOGIN_DATE)=$MonthPrev AND YEAR(LOGIN_DATE)=YEAR($today) and Day(LOGIN_DATE)<$DateNow
group by GPLFLAG2,FINTYPE_SEG,FINBRANCH  
order by GPLFLAG2,FINTYPE_SEG,FINBRANCH;

drop table LOS_PMTD_FINAL_SANCTIONS;
create table LOS_PMTD_FINAL_SANCTIONS as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as FINAL_SANCTIONS ,sum(FINALLOANAMOUNT)/10000000 FINAL_SANCTIONS_Amount
from VSJ4
where STATUS_SEG ='A) Final Sanction' and Month(FIRST_PSV)=$MonthPrev AND YEAR(FIRST_PSV)=YEAR($today) and Day(FIRST_PSV)<$DateNow
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_PMTD_INCOME_SANCTIONS;
create table LOS_PMTD_INCOME_SANCTIONS as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as INCOME_SANCTIONS ,sum(FINALLOANAMOUNT)/10000000 INCOME_SANCTIONS_Amount
from VSJ4
where STATUS_SEG ='C) Income Sanction' and Month(FIRST_ENTRY_TO_COLLATERAL)=$MonthPrev AND YEAR(FIRST_ENTRY_TO_COLLATERAL)=YEAR($today)
and Day(FIRST_ENTRY_TO_COLLATERAL)<$DateNow
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_PMTD_Rejects;
create table LOS_PMTD_Rejects as
select GPLFLAG2,FINTYPE_SEG,FINBRANCH,count(*) as Rejects ,sum(REQLOANAMT)/1000000000 Rejects_Amount
from VSJ4
where STATUS_SEG ='B) Rejected' and  Month(FIRST_REJECT_DATE)=$MonthPrev AND YEAR(FIRST_REJECT_DATE)=YEAR($today)  and Day(FIRST_REJECT_DATE)<$DateNow
group by GPLFLAG2,FINTYPE_SEG,FINBRANCH
order by GPLFLAG2,FINTYPE_SEG,FINBRANCH;

drop table LOS_PMTD_Bookings;
create table LOS_PMTD_Bookings as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as Bookings ,sum(Booked_Amount)/10000000 Bookings_Amount,sum(WROI)/10000000 as WROI
from VSJ4 
where STATUS ='Booked'  and Month(BOOKING_DATE)=$MonthPrev AND YEAR(BOOKING_DATE)=YEAR($today) and Day(BOOKING_DATE)<$DateNow
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_PMTD;
create table LOS_PMTD as
select A.GPLFLAG,A.FINTYPE_SEG,A.FINBRANCH,F.Logins,F.Logins_Amount,B.FINAL_SANCTIONS,B.FINAL_SANCTIONS_Amount,C.Bookings,C.Bookings_Amount,C.WROI,D.Rejects,D.Rejects_Amount,
E.INCOME_SANCTIONS,E.INCOME_SANCTIONS_Amount,'MTDPrev' Timeline 
from TABLELOS_NEW_3 A
left join LOS_PMTD_LOGINS F on A.FINTYPE_SEG = F.FINTYPE_SEG and A.FINBRANCH = F.FINBRANCH and A.GPLFLAG = F.GPLFLAG2
left join LOS_PMTD_FINAL_SANCTIONS B on A.FINTYPE_SEG = B.FINTYPE_SEG and A.FINBRANCH = B.FINBRANCH and A.GPLFLAG = B.GPLFLAG_SANCTIONS
left join LOS_PMTD_Bookings C on A.FINTYPE_SEG = C.FINTYPE_SEG and A.FINBRANCH = C.FINBRANCH and A.GPLFLAG = C.GPLFLAG_SANCTIONS
left join LOS_PMTD_Rejects D on A.FINTYPE_SEG = D.FINTYPE_SEG and A.FINBRANCH = D.FINBRANCH and A.GPLFLAG = D.GPLFLAG2
left join LOS_PMTD_INCOME_SANCTIONS E on A.FINTYPE_SEG = E.FINTYPE_SEG and A.FINBRANCH = E.FINBRANCH and A.GPLFLAG = E.GPLFLAG_SANCTIONS;

SET today = TO_DATE(CONVERT_TIMEZONE('Asia/Kolkata',CURRENT_TIMESTAMP()));
SET MonthNow = Month($today);

drop table LOS_FMTD_Logins;
create table LOS_FMTD_Logins as
select GPLFLAG2,FINTYPE_SEG,FINBRANCH,count(*) as Logins ,sum(REQLOANAMT)/1000000000 Logins_Amount
from VSJ4
where LOGINSTATUS ='A) Login' and Month(LOGIN_DATE)=$MonthNow AND YEAR(LOGIN_DATE)=YEAR($today) and TO_DATE(LOGIN_DATE)<=$yesterday
group by GPLFLAG2,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG2,FINTYPE_SEG,FINBRANCH;

drop table LOS_FMTD_FINAL_SANCTIONS;
create table LOS_FMTD_FINAL_SANCTIONS as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as FINAL_SANCTIONS ,sum(FINALLOANAMOUNT)/10000000 FINAL_SANCTIONS_Amount
from VSJ4
where STATUS_SEG ='A) Final Sanction' and Month(FIRST_PSV)=$MonthNow AND YEAR(FIRST_PSV)=YEAR($today) and Month(LOGIN_DATE)=$MonthNow
and TO_DATE(FIRST_PSV)<=$yesterday
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH  
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_FMTD_INCOME_SANCTIONS;
create table LOS_FMTD_INCOME_SANCTIONS as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as INCOME_SANCTIONS ,sum(FINALLOANAMOUNT)/10000000 INCOME_SANCTIONS_Amount
from VSJ4
where STATUS_SEG ='C) Income Sanction' and Month(FIRST_ENTRY_TO_COLLATERAL)=$MonthNow AND YEAR(FIRST_ENTRY_TO_COLLATERAL)=YEAR($today) 
 and TO_DATE(FIRST_ENTRY_TO_COLLATERAL)<=$yesterday
and Month(LOGIN_DATE)=$MonthNow
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_FMTD_Rejects;
create table LOS_FMTD_Rejects as
select GPLFLAG2,FINTYPE_SEG,FINBRANCH,count(*) as Rejects ,sum(REQLOANAMT)/1000000000 Rejects_Amount
from VSJ4
where STATUS_SEG ='B) Rejected' and  Month(FIRST_REJECT_DATE)=$MonthNow AND YEAR(FIRST_REJECT_DATE)=YEAR($today)  
and Month(LOGIN_DATE)=$MonthNow	and TO_DATE(FIRST_REJECT_DATE)<=$yesterday
group by GPLFLAG2,FINTYPE_SEG,FINBRANCH
order by GPLFLAG2,FINTYPE_SEG,FINBRANCH;

drop table LOS_FMTD_Bookings;
create table LOS_FMTD_Bookings as
select GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH,count(*) as Bookings ,sum(Booked_Amount)/10000000 Bookings_Amount,sum(WROI)/10000000 as WROI
from VSJ4
where STATUS ='Booked'  and Month(BOOKING_DATE)=$MonthNow AND YEAR(BOOKING_DATE)=YEAR($today) and Month(LOGIN_DATE)=$MonthNow  
and TO_DATE(BOOKING_DATE)<=$yesterday
group by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH 
order by GPLFLAG_SANCTIONS,FINTYPE_SEG,FINBRANCH;

drop table LOS_MTDFunnel;
create table LOS_MTDFunnel as
select A.GPLFLAG,A.FINTYPE_SEG,A.FINBRANCH,F.Logins,F.Logins_Amount,B.FINAL_SANCTIONS,B.FINAL_SANCTIONS_Amount,C.Bookings,C.Bookings_Amount,
C.WROI,D.Rejects,D.Rejects_Amount,
E.INCOME_SANCTIONS,E.INCOME_SANCTIONS_Amount,'MTDFunnel' Timeline 
from TABLELOS_NEW_3 A 
left join LOS_FMTD_LOGINS F on A.FINTYPE_SEG = F.FINTYPE_SEG and A.FINBRANCH = F.FINBRANCH and A.GPLFLAG = F.GPLFLAG2
left join LOS_FMTD_FINAL_SANCTIONS B on A.FINTYPE_SEG = B.FINTYPE_SEG and A.FINBRANCH = B.FINBRANCH and A.GPLFLAG = B.GPLFLAG_SANCTIONS
left join LOS_FMTD_Bookings C on A.FINTYPE_SEG = C.FINTYPE_SEG and A.FINBRANCH = C.FINBRANCH and A.GPLFLAG = C.GPLFLAG_SANCTIONS
left join LOS_FMTD_Rejects D on A.FINTYPE_SEG = D.FINTYPE_SEG and A.FINBRANCH = D.FINBRANCH and A.GPLFLAG = D.GPLFLAG2
left join LOS_FMTD_INCOME_SANCTIONS E on A.FINTYPE_SEG = E.FINTYPE_SEG and A.FINBRANCH = E.FINBRANCH and A.GPLFLAG = E.GPLFLAG_SANCTIONS;
drop table LOS_UNION;

create table LOS_UNION as 
(
select * from LOS_YTD
Union All
select * from LOS_MTD
Union All
select * from LOS_PMTD
UNION ALL
select * from LOS_MTDFunnel
Union All
select * from LOS_WTD
union All
select * from LOS_FTD
);

drop table LOS_SUMMARY;
create table LOS_SUMMARY as
select A.*,B.LOGINS,B.FINAL_SANCTIONS,B.INCOME_SANCTIONS,B.BOOKINGS,B.REJECTS,B.LOGINS_AMOUNT,B.FINAL_SANCTIONS_AMOUNT,
B.INCOME_SANCTIONS_AMOUNT,B.BOOKINGS_AMOUNT,B.REJECTS_AMOUNT,B.WROI
from TABLELOS_NEW_3 A
left join LOS_UNION B on A.Timeline = B.TIMELINE and  A.FINTYPE_SEG=B.FINTYPE_SEG and A.FINBRANCH = B.FINBRANCH 
and A.GPLFLAG = B.GPLFLAG;

drop table LOS_FINAL_SUMMARY;
create table LOS_FINAL_SUMMARY as 
select distinct A.TIMELINE,A.GPLFLAG,A.FINTYPE_SEG,A.FINBRANCH,A.LOGINS,A.FINAL_SANCTIONS,A.INCOME_SANCTIONS,
A.BOOKINGS,A.REJECTS,A.LOGINS_AMOUNT,A.FINAL_SANCTIONS_AMOUNT,A.INCOME_SANCTIONS_AMOUNT,A.BOOKINGS_AMOUNT,B.DISB,B.TOTAL_PREMIUM,
A.REJECTS_AMOUNT,A.WROI
from LOS_SUMMARY A 
left join LOS_DISB B on A.TIMELINE = B.TIMELINE and A.FINBRANCH = B.FINBRANCH and A.FINTYPE_SEG = B.FINTYPE_SEG
and A.GPLFLAG = B.GPLFLAG
order by case TIMELINE
when 'YTD' then 1
when 'MTD' then 2
when 'MTDPrev' then 3
when 'MTDFunnel' then 4 
when 'WTD' then 5
when 'FTD' then 6
end,
CASE GPLFLAG
WHEN 'GPL' THEN 1
WHEN 'NON GPL' THEN 2
WHEN 'NIL' THEN 3
WHEN 'AHL' THEN 4
END, FINTYPE_SEG,FINBRANCH;


--select * from LOS_FINAL_SUMMARY;

--select distinct(GPLFLAG_SANCTIONS) from VSJ4 where AHL_FLAG = 'YES';
--select distinct * from VSJ4;

--DAILY BACKUP TABLE
--SET today = TO_DATE(CONVERT_TIMEZONE('Asia/Kolkata',CURRENT_TIMESTAMP()));
--SET VSJ4=(SELECT 'VSJ4_Master' || '_' || TO_VARCHAR($today, 'DDMMYYYY'));
--CREATE TABLE IDENTIFIER($VSJ4) as
--select distinct * from VSJ4;


--Insert for new detailed_status
--insert into V_DETAILED_STATUS_MAPPING (NEXTROLECODE,ROLECODE,RECORDSTATUS,FINSOURCEID,LOAN_STATUS,Detailed_Status,Status,Queue)
--values
--('HL_OPSMAKER2','HL_OPSMAKER2','Saved','APIUSER','NULL','Sanction','Sanction','Credit')
--('HL_DDE','HL_CREDIT_FINAL','Resubmitted to DDE','APIUSER','NULL','Sanction','Sanction','Credit');
--('HL_CREDIT','HL_CREDIT_FINAL','Resubmitted to CM','PFF','NULL','Credit Manager','CM & Above','Credit');

--IS FLOW
SET today = TO_DATE(CONVERT_TIMEZONE('Asia/Kolkata',CURRENT_TIMESTAMP()));
set yesterday = $today -1;

drop table IS_FLOW ;      
create table IS_FLOW as
select FINBRANCH,IS_YEAR_MONTH,FINALLOANAMOUNT/10000000 as FINALLOANAMOUNT  
from (select * from VSJ4 where TO_DATE(FIRST_ENTRY_TO_COLLATERAL)<=$yesterday)
where STATUS_SEG = 'C) Income Sanction' and FINTYPE_SEG = 'A) HL';
drop table ISFLOW_HLVolume;   
create table ISFLOW_HLVolume as         
select distinct *
from IS_FLOW
pivot(count(FINALLOANAMOUNT)  for IS_YEAR_MONTH in ('2020-11', '2020-12', '2021-1', '2021-2','2021-3','2021-4','2021-5','2021-6',
                                                    '2021-7','2021-8','2021-9','2021-10','2021-11','2021-12','2022-1','2022-2','2022-3','2022-4','2022-5','2022-6','2022-7','2022-8','2022-9','2022-10','2022-11'))
order by FINBRANCH;
drop table ISFLOW_HLValue;     
create table ISFLOW_HLValue as         
select distinct *
from IS_FLOW
pivot(sum(FINALLOANAMOUNT) for IS_YEAR_MONTH in ('2020-11', '2020-12', '2021-1', '2021-2','2021-3','2021-4','2021-5','2021-6',
                                                  '2021-7','2021-8','2021-9','2021-10','2021-11','2021-12','2022-1','2022-2','2022-3','2022-4','2022-5','2022-6','2022-7','2022-8','2022-9','2022-10','2022-11'))
                                                  

order by FINBRANCH;

--SELECT * FROM ISFLOW_HLVolume;

--SELECT * FROM ISFLOW_HLValue;


--Disbursement First and Tranche

drop table DISBFIRST;
create table DISBFIRST as 
select  FINREFERENCE,DISBDATE,MONTH(DISBDATE) as FIRSTMONTHDISB, CONCAT(YEAR(DISBDATE),'-',MONTH(DISBDATE)) FIRSTDISB_YEAR_MONTH,
DISBAMOUNT/1000000000 as FIRSTDISBAMOUNT  from V_FINDISBURSEMENTDETAILS
where DISBSEQ = 1 and TO_DATE(DISBDATE)<=$yesterday;
drop table DISBFIRST1;
create table DISBFIRST1 as 
select A.FINREFERENCE,A.FIRSTDISB_YEAR_MONTH,A.FIRSTDISBAMOUNT,B.FINBRANCH,B.FINTYPE_SEG from DISBFIRST A 
left join VSJ4 B on A.FINREFERENCE = B.FINREFERENCE;
drop table DISBTRUNC;
create table DISBTRUNC as 
select FINREFERENCE,MONTH(DISBDATE) as TRANCHEMONTHDISB, CONCAT(YEAR(DISBDATE),'-',MONTH(DISBDATE)) TRANCHDISB_YEAR_MONTH,
sum(DISBAMOUNT/1000000000)  as TRANCHEDISBAMOUNT from V_FINDISBURSEMENTDETAILS
where DISBSEQ <> 1 and TO_DATE(DISBDATE)<=$yesterday
group by FINREFERENCE,TRANCHDISB_YEAR_MONTH,TRANCHEMONTHDISB;
drop table DISBTRUNC1 ;
create table DISBTRUNC1 as 
select A.FINREFERENCE,A.TRANCHDISB_YEAR_MONTH,A.TRANCHEDISBAMOUNT,B.FINBRANCH,B.FINTYPE_SEG from DISBTRUNC A 
left join VSJ4 B on A.FINREFERENCE = B.FINREFERENCE;
drop table V_DISBTRUNC;
create table V_DISBTRUNC as
select * from (select FINBRANCH,TRANCHDISB_YEAR_MONTH,TRANCHEDISBAMOUNT from DISBTRUNC1 )

pivot(sum(TRANCHEDISBAMOUNT)  for TRANCHDISB_YEAR_MONTH in ('2020-11', '2020-12', '2021-1', '2021-2','2021-3','2021-4','2021-5','2021-6',
                                                            '2021-7','2021-8','2021-9','2021-10','2021-11','2021-12','2022-1','2022-2','2022-3','2022-4','2022-5','2022-6','2022-7','2022-8','2022-9','2022-10','2022-11'))
order by FINBRANCH;
drop table V_FIRSTDISB;
create table V_FIRSTDISB as
select * from (select FINBRANCH,FIRSTDISB_YEAR_MONTH,FIRSTDISBAMOUNT from DISBFIRST1 )

pivot(sum(FIRSTDISBAMOUNT)  for FIRSTDISB_YEAR_MONTH in ('2020-11', '2020-12', '2021-1', '2021-2','2021-3','2021-4','2021-5','2021-6',
                                                         '2021-7','2021-8','2021-9','2021-10','2021-11','2021-12','2022-1','2022-2','2022-3','2022-4','2022-5','2022-6','2022-7','2022-8','2022-9','2022-10','2022-11'))
order by FINBRANCH;

--SELECT * FROM V_FIRSTDISB;

--SELECT * FROM V_DISBTRUNC;

--SELECT * FROM FINDISBURSEMENTDETAILS;


--AUM
drop table PO_VIEW;
create table PO_VIEW as 
select FINBRANCH,sum(PRINCIPAL_OUTSTANDING)/10000000 as AUM from VSJ4 where LOAN_STATUS = 'Active'
group by FINBRANCH
order by FINBRANCH;
--select * from PO_VIEW;

--StageWise LOS New (from 2nd Dec)

drop table SJCRON_QUERY_STATUS_LIST;
create table SJCRON_QUERY_STATUS_LIST as 
select A.LAN, DATE_AND_TIME_RAISED_BY ,AGEING_FOR_OPEN_CASES,STATUS as QUERY_STATUS from MIS_QUERY_MANAGEMENT_VIEW A
left join (select LAN,max(DATE_AND_TIME_RAISED_BY) as MAX_DATE from MIS_QUERY_MANAGEMENT_VIEW group by LAN) B  on A.LAN=B.LAN      
where A.STATUS = 'Open' and A.DATE_AND_TIME_RAISED_BY = B.MAX_DATE ;       
drop table VSJ5;
create table VSJ5 as 
select A.*,B.QUERY_STATUS,B.DATE_AND_TIME_RAISED_BY,B.AGEING_FOR_OPEN_CASES from VSJ4 A
left join SJCRON_QUERY_STATUS_LIST B on A.FINREFERENCE = B.LAN;
        
        
drop table  VSJ6 ;     
create table  VSJ6 as 
select A.*,B.DETAILED_STATUS_UPDT,
case when DETAILED_STATUS_UPDT is Null then A.DETAILED_STATUS
else  DETAILED_STATUS_UPDT 
end as FINAL_DETAILED_STATUS
from VSJ5 A
left join SJCron_Query_DetailedStatus_Lookup_23022021 B on UPPER(A.DETAILED_STATUS) = UPPER(B.DETAILED_STATUS)  
and UPPER(A.QUERY_STATUS) = UPPER(B.QUERYSTATUS);
--select * from SJCron_Query_DetailedStatus_Lookup_23022021

SET today = TO_DATE(CONVERT_TIMEZONE('Asia/Kolkata',CURRENT_TIMESTAMP()));

DROP TABLE VSJ7;
CREATE TABLE VSJ7 AS
SELECT A.*, B.RANK, B.RANK || ') ' || A.FINAL_DETAILED_STATUS as FINAL_DETAILED_STATUS_SORTED,
datediff(day,DATE_AND_TIME_RAISED_BY,$today) as Query_Ageing_Days
FROM VSJ6 A
LEFT JOIN SJCRON_DETAILED_STATUS_RANKING_23022021 B
ON trim(UPPER(A.FINAL_DETAILED_STATUS))=trim(UPPER(B.DETAILED_STATUS));

--Delete from VSJ7 where FINBRANCH in ('Chennai','Jaipur','Indore','Surat','Chandigarh','Hyderabad');

drop table OPSQUEUE_SUMMARY;
create table OPSQUEUE_SUMMARY as        
SELECT FINBRANCH, FINAL_DETAILED_STATUS_SORTED , COUNT(*) as Count ,sum(REQLOANAMT/1000000000) as Value_
FROM VSJ7
WHERE QUEUE='Ops' --AND LOGINSTATUS='A) Login'
GROUP BY FINBRANCH, FINAL_DETAILED_STATUS_SORTED;

drop table CREDITQUEUE_SUMMARY;
create table CREDITQUEUE_SUMMARY as        
SELECT FINBRANCH, FINAL_DETAILED_STATUS_SORTED , COUNT(*) as Count ,sum(FINALLOANAMOUNT/10000000) as Value_
FROM VSJ7
WHERE QUEUE='Credit' --AND LOGINSTATUS='A) Login'
GROUP BY FINBRANCH, FINAL_DETAILED_STATUS_SORTED;
       
drop table DISBQUEUE_SUMMARY;
create table DISBQUEUE_SUMMARY as      
SELECT FINBRANCH, FINAL_DETAILED_STATUS_SORTED , COUNT(*) as Count ,sum(FINALLOANAMOUNT/10000000) as Value_
FROM VSJ7
WHERE QUEUE='Disbursement Queue' --AND LOGINSTATUS='A) Login'
GROUP BY FINBRANCH, FINAL_DETAILED_STATUS_SORTED ;  


--select * from DISBQUEUE_SUMMARY; 
--select * from CREDITQUEUE_SUMMARY;
--select * from OPSQUEUE_SUMMARY;


--DTCRON

--------- DTCRON Sample DB -------

CREATE or replace view CIF_COUNTRYCODE_VIEW as 
SELECT DISTINCT A.CUSTCIF, A.AFTCUSTADDRCOUNTRY ,
case when L.COUNTRY is null then A.AFTCUSTADDRCOUNTRY
else L.COUNTRY 
end as CountryName 
from 
    (SELECT DISTINCT A.CUSTCIF, A.AFTCUSTADDRCOUNTRY
    FROM MIS_CHANGE_IN_DEMOGRAPHIC_DETAILS_VIEW A
    LEFT JOIN
    (
    SELECT distinct CUSTCIF, MAX(AUDITDATETIME) as maxTime
    FROM MIS_CHANGE_IN_DEMOGRAPHIC_DETAILS_VIEW
    WHERE AFTCUSTADDRTYPE = 'PRIRES'
    GROUP BY CUSTCIF
    ) B
    on A.CUSTCIF=B.CUSTCIF
    WHERE A.AUDITDATETIME=B.maxTime
    AND A.AFTCUSTADDRTYPE = 'PRIRES'
    ) A
left join CIFCOUNTRY L on L.CIF = A.CUSTCIF;
--CIBIL APP & COAPP Code
DROP TABLE minCIBILCoAppLookupTable;
CREATE TABLE minCIBILCoAppLookupTable AS
SELECT DISTINCT MAIN.LAN_ID, IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp) minCIBILCoApp,
CASE WHEN IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)=-1 THEN 'A) -1' 
WHEN IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)>1 AND  
IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)<650 THEN 'B) <650'
WHEN IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)>=650 AND 
IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)<=699 THEN 'C) 650-699'
WHEN IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)>699 AND 
IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)<=749 THEN 'D) 700-749'
WHEN IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)>749 AND  
IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)<=800 THEN 'E) 750-800'
WHEN IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)>800 THEN 'F) >800' 
ELSE 'G) Not Available'
END AS CIBILCAT2
FROM 
(select LAN_ID, MIN(CSExtractedCoApp) as minCIBILCoApp
from 
(
SELECT distinct LAN_ID,
CASE WHEN CIBIL_SCORE LIKE '%-1%' THEN TRY_TO_NUMBER(RIGHT(CIBIL_SCORE,2))
ELSE TRY_TO_NUMBER(RIGHT(CIBIL_SCORE,3)) END AS CSExtractedCoApp
from MAIN_CO_APPLICANT_CIBIL_VIEW
WHERE CUSTOMERCATEGORY='Co-Applicant' 
)
GROUP BY LAN_ID) MAIN
LEFT JOIN 
(select LAN_ID, MIN(CSExtractedCoApp) as minCIBILCoApp 
from 
(
SELECT distinct LAN_ID,
CASE WHEN CIBIL_SCORE LIKE '%-1%' THEN TRY_TO_NUMBER(RIGHT(CIBIL_SCORE,2))
ELSE TRY_TO_NUMBER(RIGHT(CIBIL_SCORE,3)) END AS CSExtractedCoApp
from MAIN_CO_APPLICANT_CIBIL_VIEW
WHERE CUSTOMERCATEGORY='Co-Applicant' AND CIBIL_SCORE <> '000-1'
)
GROUP BY LAN_ID
) A 
ON MAIN.LAN_ID = A.LAN_ID;


DROP TABLE SJCron_CREDITDASHBOARD_CUBE_Weekly;
CREATE TABLE SJCron_CREDITDASHBOARD_CUBE_Weekly
AS
select distinct F.*,
case when F.LOGINSTATUS = 'A) Login' then '1'else '0'
end as LOGIN_FLAG,
case when F.STATUS = 'Booked' then '1'else '0'
end as BOOKING_FLAG,
case when F.STATUS_SEG = 'A) Final Sanction' then '1'else '0'
end as SANCTION_FLAG,
case when DV.LOAN_STATUS = 'Active' and F.DISB_AMOUNT is not Null  then '1'else '0'
end as DISBURSED_FLAG,
case when F.STATUS_SEG ='WIP'then '1'else '0'
end as WIP_FLAG,
case when F.STATUS_SEG = 'B) Rejected' then '1'else '0'
end as Reject_FLAG_Sales,
case when F.STATUS_SEG = 'C) Income Sanction' then '1' else '0'
end as INCOME_SANCTION_FLAG,
case when SANCTION_FLAG ='1' then F.FINALLOANAMOUNT/10000000 else '0'
end as SANCTION_CR,
case when BOOKING_FLAG = '1' then F.BOOKED_AMOUNT/10000000 else '0'
end as BOOKED_CR,
case when DISBURSED_FLAG ='1' then F.DISB_AMOUNT/10000000 else '0'
end as DISBURSED_CR,
case when INCOME_SANCTION_FLAG = '1' then F.FINALLOANAMOUNT/10000000 else '0'
end as INCOME_SANCTION_CR,
case when F.BOOKED_AMOUNT is null then 0
else ((F.ROI) * (F.BOOKED_AMOUNT))
end as WRO,
A.RISK_SCORE,A.NETSALARY/100 as NETSALARY,A.STATUS_DATES,C.GHFSM,C.GHFSM_NAME,C.GHFAM_BD,C.GHFAM_BD_NAME,C.GHFAM,C.GHFAM_NAME, --A.RESIDENTIAL_STATUS,
A.TYPES_OF_REJECT,A.REJECT_REMARKS,A.EMPLOYERNAME,A.CITY,
A.YEAREXPERIENCE,A.CUSTOMER_NAME,
A.CUSTOMER_TYPE,A.CREDITWORTH,A.INCOME_PROGRAM_TYPE,A.BORROWER_TYPE,A.OCR_ID,A.LEADID,A.OCCUPATION,
A.FRESH_LOGIN,A.PREVIOUS_STAGES,A.ACTIVITY,A.INCOME_SANCTION,A.FINAL_SANCTION,A.RECIEPTS,
--A.BT_INSTITUTION_OTHER,A.BT_LOAN_LAN,A.BT_OUTSTANDING, A.BT_INSTITUTION,
A.SAL_OTHERINCOME,A.SE_OTHERINCOME,A.CORP_RECEIPTS,
A.CORP_NET_PROFIT,A.CORP_OTHERINCOME,A.FINAL_ELIGIBLE_INCOME,A.FTR,A.NO_OF_DEVIATIONS,A.INDIVIDUAL_DEVIATION_FLAG,A.CUST_AGE,
A.CUST_EMP_TYPE,G.SUBSECTOR as SUBSECTOR_,G.BORROWER_TYPE as CUST_TYPE,G.CURRENT_USER_WORKING_ROLECODE,G.CURRENT_USER_WORKING_ACTIVITY,
VT.FIRST_CO,VT.FIRST_CREDIT_MANAGER,VT.ADDITIONAL_TAG_OF_PROPERTY_IDENTIFICATION,VT.SUBMIT_TO_CRM_NAME,
CASE WHEN VT.FIRST_CREDIT_MANAGER IS NULL 
THEN FC.NEXT_USER
ELSE VT.FIRST_CREDIT_MANAGER
END AS CREDIT_MANAGER_UPDATED,
A.CIBIL_SCORE,--A.EMPLOYMENT_TYPE,
A.BRANCHDESC,A.LOAN_TYPE,A.CUSTINDUSTRY,A.SECTOR,A.QUALIFICATION,--A.NETSALARY*12 as NETSALARY_ANNUAL,
A.SCHEME_MORATORIUM, A.SCHEME_MORATORIUM2, 
B.FOIR,B.LTV,--B.PROJECTNAME,
C.SANCTION_AMOUNT,C.DISBURSED_AMOUNT as DISBURSED_AMOUNT2,C.TOTAL_TENOR,C.AGE,
(E.REPAYMARGIN)+15.86 as ROI2,
D.LOAN_AMOUNT as BOOKED_AMOUNT_OTHER, 
G.PEP, --G.CRE,
H.PSL, 
H.EMI_BREAK_SCHEME, H.PARALLEL_FUNDING_SCHEME, 
H.RISK_CATEGORY, H.DELINQUENCY, A.CIF, --J.MAIN_APPLICANT_GENDER, --I.AFTCUSTADDRCOUNTRY, --A.LOAN_PURPOSE, 
A.CORP_GROSS_TO, A.GROSSTO, --K.APPLICANT_RESIDENCE_ADDRESS, 
L.TotalIncomeAcrossApplicants, 
A.NHBSCHEME, A.SUBSECTOR, A.NATURE_OF_EMPLOYEE, M.readyPropertyFlag, E.STEPFINANCE, E.ALLOWGRCPERIOD,
P.minCIBILCoApp, P.CIBILCAT2,
R.CONSTRUCTIONTYPE as CONSTRUCTIONTYPE_2, G.BORROWER_TYPE as CUST_CAT,MDS.MTDDISBSALES,MDS.MTDPREMIUMSALES,
S.BT_INSTITUTION, S.BT_INSTITUTION_OTHER, S.BT_LOAN_START_DATE, S.BT_OUTSTANDING, S.BT_LOAN_LAN, S.SUBPRODUCT, 
S.SELFEMPLOYEDRISK, S.SELFEMPYRISKSEGMT, S.TAT_REASON,
T.BUILDERIDNAME, U.COLLATERAL_TYPE, V.PROPERTY_TYPE,
CASE WHEN TYPES_OF_REJECT like '%,%' then LEFT(TYPES_OF_REJECT, CHARINDEX(',', TYPES_OF_REJECT) - 1)
ELSE TYPES_OF_REJECT
END AS Reject_Reason_one, 
case when F.STATUS IN ('Sanction','Booked','Income Sanction','Cancelled') then 'A) Sanction'
when F.STATUS = 'Rejected' then 'B) Reject'
else 'C) WIP'
end as FINALSTATUS,
case when F.STATUS='Instant Sanction Queue' THEN 'B) Instant Sanction Queue' 
ELSE 'A) Login'
END AS LOGINSTATUS_OTHER, 
CASE WHEN FINALSTATUS='A) Sanction' AND F.STATUS <> 'Income Sanction' THEN 'A) Final Sanction'
WHEN FINALSTATUS='A) Sanction' AND F.STATUS = 'Income Sanction'  THEN 'B) Income Sanction'
ELSE 'C) Others'
END AS IncomeSanctionFlag, 
case when E.FINTYPE IN ('HL','HT') then 'A) HL & HT'
else 'B) FL, FT, LT'
end as LOAN_TYPE_FILTER,

case when A.RESIDENTIAL_STATUS <> 'NR' and LOWER(A.LOAN_PURPOSE) LIKE '%plot%' then 'Plot Loan'
when A.LOAN_PURPOSE='Home Loan Resale' THEN 'Resale'
else 'Under Construction'
end as CONSTRUCTION_TYPE, --Ready Resale (Cat shuold be update) --when A.RESIDENTIAL_STATUS = 'NR' then 'NRI'

case when C.AGE >=18 and C.AGE <= 24 then 'A) 18-24'
when C.AGE >24 and C.AGE <= 29 then 'B) 25-29'
when C.AGE >29 and C.AGE <= 34 then 'C) 30-34'
when C.AGE >34 and C.AGE <= 44 then 'D) 35-44'
when C.AGE >44 and C.AGE <= 54 then 'E) 45-54'
when C.AGE >54  then 'F) 55+'
else 'G) Unknown'
end as AGE_CAT,
case when C.TOTAL_TENOR<=120 then 'A) LTE 120'
when C.TOTAL_TENOR>120 and C.TOTAL_TENOR<=180 then 'B) GT120-LTE180'
when C.TOTAL_TENOR>180 and C.TOTAL_TENOR<=240 then 'C) GT180-LTE240'
when C.TOTAL_TENOR>240 and C.TOTAL_TENOR<=360  then 'D) GT240-LTE360'
when C.TOTAL_TENOR>360 then 'E) GT360'
else 'F) Not Available'
end as TENURE_CAT,

case when B.LTV<50 then 'A) Less than 50'
when B.LTV>=50 and B.LTV<75 then 'B) 50-75'
when B.LTV>=75 and B.LTV<=80 then 'C) 75-80'
when B.LTV>80 and B.LTV<=90 then 'D) 80-90'
else 'E) Others'
end as LTV_CAT, 

case when B.FOIR<50 then 'A) Less than 50'
when B.FOIR>=50 and B.FOIR<65 then 'B) 50-65'
when B.FOIR>=65 and B.FOIR<=80 then 'C) 65-80'
when B.FOIR>80 and B.FOIR<=85 then 'D) 80-85'
when B.FOIR>85 then 'E) 85+'
else 'F) Others'
end as FOIR_CAT,

case when B.FOIR<50 then 'A) Less than 50'
when B.FOIR>=50 and B.FOIR<65 then 'B) 50-65'
when B.FOIR>=65 and B.FOIR<70 then 'C) 65-70'
when B.FOIR>=70 and B.FOIR<75 then 'D) 70-75'
when B.FOIR>=75 and B.FOIR<=80 then 'E) 75-80'
when B.FOIR>80 and B.FOIR<=85 then 'F) 80-85'
when B.FOIR>85 then 'G) 85+'
else 'H) Others'
end as FOIR_CAT2,

case when A.YEAREXPERIENCE>=0 and A.YEAREXPERIENCE<=5 then 'A) Upto 5'
when A.YEAREXPERIENCE>5 and A.YEAREXPERIENCE<=10 then 'B) 5-10'
when A.YEAREXPERIENCE>10 and A.YEAREXPERIENCE<=20 then 'C) 10-20'
when A.YEAREXPERIENCE>20 then 'D) >20'
else 'E) Not Available'
end as YEARS_EXP_CAT, 
C.REQUESTED_AMOUNT/1000000000 as reqLoanAmtDerived,


CASE WHEN F.STATUS IN ('Sanction','Booked','Income Sanction','Cancelled') THEN C.SANCTION_AMOUNT/10000000 ELSE 0
END AS sanctionAmtDerived,

case when F.STATUS='Booked' THEN 'A) Disbursed' ELSE 'B) Not Available' END as DISBURSEDSTATUS,

CASE WHEN F.STATUS='Booked' THEN C.DISBURSED_AMOUNT/10000000 ELSE 0 END AS disbAmtDerived,

D.LOAN_AMOUNT/10000000 bookAmountDerived,    
CASE WHEN A.CIBIL_SCORE LIKE '%-1%' THEN TRY_TO_NUMBER(RIGHT(A.CIBIL_SCORE,2)) 
ELSE TRY_TO_NUMBER(RIGHT(A.CIBIL_SCORE,3)) END AS cibilExtracted,    
CASE WHEN A.RISK_SCORE is null THEN 'Z) NULL'
WHEN A.RISK_SCORE=0 THEN 'Y) Zero'
WHEN A.RISK_SCORE<45 THEN 'A) Less than 45' 
WHEN A.RISK_SCORE>=45 AND A.RISK_SCORE<=49 THEN 'B) Market 45-49'
WHEN A.RISK_SCORE>49 AND A.RISK_SCORE<=69 THEN 'C) Market Plus 50-69'
WHEN A.RISK_SCORE>69 THEN 'D) Plus Plus > 70'
ELSE 'G) Not Available'
END AS riskScoreCat,
CASE WHEN A.RISK_SCORE >=0  AND  A.RISK_SCORE <10 THEN  'A) Upto 10' --Risk score null, then null
WHEN A.RISK_SCORE >=10  AND  A.RISK_SCORE <20 THEN  'B) 10 to 20' 
WHEN A.RISK_SCORE >=20  AND  A.RISK_SCORE <30 THEN  'C) 20 to 30' 
WHEN A.RISK_SCORE >=30  AND  A.RISK_SCORE <40 THEN  'D) 30 to 40' 
WHEN A.RISK_SCORE >=40  AND  A.RISK_SCORE <50 THEN  'E) 40 to 50' 
WHEN A.RISK_SCORE >=50  AND  A.RISK_SCORE <60 THEN 'F) 50 to 60' 
WHEN A.RISK_SCORE >=60  AND  A.RISK_SCORE <70 THEN 'G) 60 to 70' 
WHEN A.RISK_SCORE >=70  AND  A.RISK_SCORE <80 THEN 'H) 70 to 80' 
WHEN A.RISK_SCORE >=80  AND  A.RISK_SCORE <90 THEN 'I) 80 to 90' 
WHEN A.RISK_SCORE >=90  AND  A.RISK_SCORE <=100 THEN 'J) 90 to 100' 
WHEN A.RISK_SCORE =0 THEN 'L) Zero'
ELSE 'M) Not available'
END AS RISKSCOREMICROBANDS,
E.ELIGIBILITYMETHOD,DV.CHANNELCODE,DV.CUSTOMER_OWNERSHIP,DV.REFERENCE2,DV.REFERENCE3,DV.DST_CODE,
DV.CHANNEL_PARTNER_EMPLOYEE_CODE,DV.RESERVED_CHANNEL_CODE,DX.Processing_Fee, DV.END_USAGE_FUNDS
--,A.RN

FROM VSJ4_GHF F    ----Base Table + LOS Data
LEFT JOIN (SELECT DISTINCT * FROM MIS_CREDIT_LOAN_STATUS_VIEW3 
           WHERE SI_NO<>'1365') as A  ON F.FINREFERENCE=A.LANID
left join (SELECT DISTINCT LAN, FOIR, LTV, PROJECTNAME FROM MIS_LOAN_LEVEL_DETAILS_VIEW) as B on F.FINREFERENCE = B.LAN
left join LOAN_DATA3 as C on F.FINREFERENCE = C.FINREFERENCE
left join MIS_FINANCE_VIEW as E on F.FINREFERENCE = E.FINREFERENCE
left join MIS_DISBURSEMENT_NEW_VIEW as D on F.FINREFERENCE = D.FINREFERENCE
left join (SELECT DISTINCT LAN, PEP, CRE, BORROWER_TYPE,SUBSECTOR,CURRENT_USER_WORKING_ROLECODE,CURRENT_USER_WORKING_ACTIVITY
           FROM MIS_LOAN_LEVEL_DETAILS_VIEW) G ON F.FINREFERENCE=G.LAN
--left join (SELECT DISTINCT CUSTCIF, AFTCUSTADDRCOUNTRY FROM MIS_CHANGE_IN_DEMOGRAPHIC_DETAILS_VIEW 
           --WHERE AFTCUSTADDRTYPE = 'PRIRES') I ON A.CIF = I.CUSTCIF
--left join (SELECT DISTINCT LAN, MAIN_APPLICANT_GENDER FROM MIS_CUSTOMER_LEVEL_INFORMATION_VIEW) J ON F.FINREFERENCE = J.LAN
--left join (SELECT DISTINCT LAN, APPLICANT_RESIDENCE_ADDRESS FROM MIS_CERSAI_CHARGE_CREATION_VIEW) K ON F.FINREFERENCE = K.LAN
--left join (SELECT DISTINCT LANID, GPLFLAG FROM GPLFLAGLOOKUPTABLE) P ON F.FINREFERENCE = P.LANID
left join (SELECT DISTINCT FINREFERENCE, CONSTRUCTIONTYPE FROM mis_collateral_details_view) R ON F.FINREFERENCE = R.FINREFERENCE
left join (select DISTINCT LAN_ID, minCIBILCoApp, CIBILCAT2 FROM minCIBILCoAppLookupTable) P ON F.FINREFERENCE = P.LAN_ID
left join (SELECT DISTINCT FINANCE_REFERENCE, NEXT_USER FROM FIRST_CMS) FC ON F.FINREFERENCE = FC.FINANCE_REFERENCE
left join 
(
  SELECT DISTINCT REFERENCE, 'READY PROPERTY' as readyPropertyFlag 
  FROM SAMPLE_DB.PUBLIC.COLLATERAL_DATA 
  WHERE REFERENCE is not null AND CONSTRUCTIONTYPE='READY PROPERTY'
) M ON F.FINREFERENCE=M.REFERENCE
left join 
(
  SELECT DISTINCT LANID, PSL, EMI_BREAK_SCHEME, PARALLEL_FUNDING_SCHEME, 
  RISK_CATEGORY, DELINQUENCY FROM MIS_CREDIT_LOAN_STATUS_VIEW3
) H ON F.FINREFERENCE=H.LANID
left join
(
  SELECT DISTINCT FINREFERENCE, SUM(ANNUALINCOME) as TotalIncomeAcrossApplicants
FROM MIS_NET_SAL_VIEW
GROUP BY FINREFERENCE
) L ON F.FINREFERENCE = L.FINREFERENCE
left join V_TAT_DATA VT on F.FINREFERENCE = VT.LAN
left join MIS_DISBURSEMENT_VIEW  DV on DV.LOAN_ACCOUNTNO = F.FINREFERENCE
left join MIS_LOAN_EXTDETAILS_VIEW S on S.REFERENCE = F.FINREFERENCE
left join APFNO_MASTER_VIEW T on A.PROJECTID = cast(T.PROJECTID as varchar(16777216))
left join (SELECT LANID, LISTAGG (COLLATERAL_TYPE,', ') AS COLLATERAL_TYPE
                                          FROM MIS_CREDIT_LOAN_STATUS_VIEW3
                                          GROUP BY LANID) U 
           ON F.FINREFERENCE = U.LANID
left join (SELECT LOAN_ACCOUNTNO, LISTAGG (PROPERTYTYPE, ', ') AS PROPERTY_TYPE
                                   FROM MIS_DISBURSEMENT_VIEW
                                   GROUP BY LOAN_ACCOUNTNO) V 
           ON F.FINREFERENCE = V.LOAN_ACCOUNTNO
left join
(select FINREFERENCE,sum(DISB) as MTDDISBSALES ,sum(TOTAL_PREMIUM) as MTDPREMIUMSALES
from MTD_DISB
group by FINREFERENCE) MDS on F.FINREFERENCE = MDS.FINREFERENCE
left join (select FINREFERENCE, sum(ACTUAL_AMOUNT) Processing_Fee from mis_fee_detail_v group by FINREFERENCE ) DX on F.FINREFERENCE = DX.FINREFERENCE;

--SELECT * FROM MIS_CREDIT_LOAN_STATUS_VIEW3 --COLLATERAL_TYPE
--SELECT * FROM MIS_DISBURSEMENT_VIEW --PROPERTYTYPE
DROP TABLE DTCRONinter;
CREATE TABLE DTCRONinter
AS
SELECT A.*,  
case when NETSALARY<'475000' then 'A) <4.75L'
when NETSALARY>='475000' and NETSALARY<'675000' then 'B) 4.75L-6.75L'
when NETSALARY>'675000' and NETSALARY<='870000' then 'C) 6.75L-8.7L'
when NETSALARY>'870000' and NETSALARY<='1550000' then 'D) 8.7L-15.5L'
when NETSALARY>'1550000' and NETSALARY<='2850000' then 'E) 15.5L-28.5L'
when NETSALARY>'2850000' then 'F) >28.5L' 
else 'G) Unknown'
end as ANNUAL_SALARY_CAT1, 

case when NETSALARY<'475000' then 'A) <4.75L'
when NETSALARY>='475000' and NETSALARY<'675000' then 'B) 4.75L-6.75L'
when NETSALARY>'675000' and NETSALARY<='870000' then 'C) 6.75L-8.7L'
when NETSALARY>'870000' and NETSALARY<='1230000' then 'D) 8.7L-12.3L'
when NETSALARY>'1230000' and NETSALARY<='2200000' then 'E) 12.3L-22L'
when NETSALARY>'2200000' then 'F) >22L' 
else 'G) Unknown'
end as ANNUAL_SALARY_CAT2,
case when NETSALARY<'475000' then 'A) <4.75L'
when NETSALARY>='475000' and NETSALARY<'675000' then 'B) 4.75L-6.75L'
when NETSALARY>'675000' and NETSALARY<='870000' then 'C) 6.75L-8.7L'
when NETSALARY>'870000' and NETSALARY<='1230000' then 'D) 8.7L-12.3L'
when NETSALARY>'1230000' and NETSALARY<='1870000' then 'E) 12.3L-18.7L'
when NETSALARY>'1870000' then 'F) >18.7L' 
else 'G) Unknown'
end as ANNUAL_SALARY_CAT3,
case when FINBRANCH = 'Mumbai' or FINBRANCH = 'Delhi' then ANNUAL_SALARY_CAT1
when FINBRANCH = 'Bangalore' then ANNUAL_SALARY_CAT2
when FINBRANCH = 'Pune' then ANNUAL_SALARY_CAT3
when FINBRANCH = 'Ahmedabad' then ANNUAL_SALARY_CAT3
else 'Unknown'
end as AnnualSalaryCatBranchWise,   


LTV * reqloanamtDerived as WEIGHTLTVLogin,
FOIR * reqloanamtDerived as WEIGHTFOIRLogin,
ROI * reqloanamtDerived as WEIGHTROILogin,
LTV * sanctionamtDerived as WeightLTVSanction, 
FOIR * sanctionamtDerived as WeightFOIRSanction,
ROI * sanctionamtDerived as WeightROISanction,
LTV * bookAmountDerived as WeightLTVBook,
FOIR * bookAmountDerived as WeightFOIRBook,
ROI * bookAmountDerived as WeightROIBook, 
CASE WHEN CIBILEXTRACTED=-1 THEN 'A) -1'
WHEN CIBILEXTRACTED>1 AND CIBILEXTRACTED<650 THEN 'B) <650'
WHEN CIBILEXTRACTED>=650 AND CIBILEXTRACTED<=699 THEN 'C) 650-699'
WHEN CIBILEXTRACTED>699 AND CIBILEXTRACTED<=749 THEN 'D) 700-749'
WHEN CIBILEXTRACTED>749 AND CIBILEXTRACTED<=800 THEN 'E) 750-800'
WHEN CIBILEXTRACTED>800 THEN 'F) >800' ELSE 'G) Not Available'
END AS CIBILCAT, 

CASE WHEN bookAmountDerived=0 THEN 'Z) Zero'
WHEN bookAmountDerived>0 AND bookAmountDerived<=0.3 THEN 'A) Upto 30 Lacs'
WHEN bookAmountDerived>0.3 AND bookAmountDerived<=0.5 THEN 'B) 30 to 50 Lacs'
WHEN bookAmountDerived>0.5 AND bookAmountDerived<=1 THEN 'C) 50 Lacs to 1Cr'
WHEN bookAmountDerived>1 THEN 'D) More than 1 Cr' ELSE 'E) Not Available'
END AS bookAmountCat_CDB, 


CASE WHEN ROI=6.69 THEN 'A) 6.69'
WHEN ROI<6.69 THEN 'B) <6.69'
WHEN ROI>6.69 AND ROI<=7 THEN 'C) 6.69-7'
WHEN ROI>7 AND ROI<=7.25 THEN 'D) 7-7.25'
WHEN ROI>7.25 AND ROI<=7.5 THEN 'E) 7.25-7.5'
WHEN ROI>7.5 AND ROI<=8 THEN 'F) 7.5-8'
WHEN ROI>8 THEN 'G) >8' ELSE 'H) Others'
END AS ROICAT_CDB, 

CASE WHEN sanctionAmtDerived=0 THEN 'Z) Zero'
WHEN sanctionAmtDerived>0 AND sanctionAmtDerived<=0.3 THEN 'A) Upto 30 Lacs'
WHEN sanctionAmtDerived>0.3 AND sanctionAmtDerived<=0.5 THEN 'B) 30 to 50 Lacs'
WHEN sanctionAmtDerived>0.5 AND sanctionAmtDerived<=1 THEN 'C) 50 Lacs to 1Cr'
WHEN sanctionAmtDerived>1 THEN 'D) More than 1 Cr' ELSE 'E) Not Available'
END AS sanctionAmountCat_CDB,

CASE WHEN FINTYPE IN ('HL','LT','HT') THEN 'A) Secured' 
WHEN FINTYPE IN ('FL','FT') THEN 'B) Unsecured' ELSE 'C) Unknown'
END AS SecuredFlag,

CASE WHEN LOAN_PURPOSE LIKE '%Plot%' THEN 'A) Plot'
WHEN LOAN_PURPOSE LIKE '%Resale%' THEN 'B) Resale' 
WHEN READYPROPERTYFLAG LIKE '%READY PROPERTY%' THEN 'C) Ready'
WHEN FINTYPE IN ('HL','LT') THEN 'D) Balance Transfer' ELSE 'E) Under Construction'
END AS LOAN_PURPOSE_MAIN,

CASE 
WHEN FINTYPE = 'FL' AND  TRIM(LOAN_PURPOSE) ='Flexi Loan Consumer Durable' then 'FL'
WHEN FINTYPE = 'FL' AND  TRIM(LOAN_PURPOSE) ='Flexi Loan Family Expenses' then 'FL'
WHEN FINTYPE = 'FL' AND  TRIM(LOAN_PURPOSE) ='Flexi Loan Others' then 'FL'
WHEN FINTYPE = 'FL' AND  TRIM(LOAN_PURPOSE) ='Flexi Loan Personal Expenses' then 'FL'

WHEN FINTYPE = 'FT' AND  TRIM(LOAN_PURPOSE) ='Flexi Loan Family Expenses' then 'FL'
WHEN FINTYPE = 'FT' AND  TRIM(LOAN_PURPOSE) ='Flexi Loan Others' then 'FL'
WHEN FINTYPE = 'FT' AND  TRIM(LOAN_PURPOSE) ='Flexi Loan Personal Expenses' then 'FL'

WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Home loan BT + Top Up' then 'HL BT'
WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Home Loan Builder Purchase' and  TRIM(CONSTRUCTIONTYPE_2)  = 'READY PROPERTY' then 'Builder Purchase Ready'
WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Home Loan Builder Purchase' and TRIM(CONSTRUCTIONTYPE_2) = 'UNDER CONSTRUCTION' then 'Builder Purchase UC'
WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Home Loan Resale' then 'Resale'
WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Plot plus construction loan' then 'Plot'
WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Plot purchase for construction of home' then 'Plot'
WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Plot purchase only' then 'Plot'
WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Pure Balance Transfer' then 'HL BT'

WHEN FINTYPE = 'HT' AND  TRIM(LOAN_PURPOSE) ='Balance Transfer + Top up' then 'HL BT'
WHEN FINTYPE = 'HT' AND  TRIM(LOAN_PURPOSE) ='Home loan BT + Top Up' then 'HL BT'
WHEN FINTYPE = 'HT' AND  TRIM(LOAN_PURPOSE) ='Home Loan Builder Purchase'  and TRIM(CONSTRUCTIONTYPE_2) = 'READY PROPERTY' then 'Builder Purchase Ready'
WHEN FINTYPE = 'HT' AND  TRIM(LOAN_PURPOSE) ='Home Loan Builder Purchase' and TRIM(CONSTRUCTIONTYPE_2) = 'UNDER CONSTRUCTION' then 'Builder Purchase UC'
WHEN FINTYPE = 'HT' AND  TRIM(LOAN_PURPOSE) ='Plot loan BT' then 'Plot'
WHEN FINTYPE = 'HT' AND  TRIM(LOAN_PURPOSE) ='Pure Balance Transfer' or LOAN_PURPOSE ='Home Loan Balance Transfer' then 'HL BT'

WHEN FINTYPE = 'LP' AND  TRIM(LOAN_PURPOSE) ='Loan against Property' then 'LAP'
WHEN FINTYPE = 'LP' AND  TRIM(LOAN_PURPOSE) ='LAP Balance Transfer' then 'LAP BT'
WHEN FINTYPE = 'LP' AND  TRIM(LOAN_PURPOSE) ='LAP Balance Transfer plus Top-up' then 'LAP BT Top up'
WHEN FINTYPE = 'LP' AND  TRIM(LOAN_PURPOSE) ='Non Residential Property Purchase' then 'NRP'
WHEN FINTYPE = 'LP' AND  TRIM(LOAN_PURPOSE) ='LAP for Refinance' then 'Refinance'

WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='Loan against Property' then 'LAP'
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='Balance Transfer + Top up' then 'Top Up'
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='Home loan BT + Top Up' then 'Top Up' 
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='Home Loan Builder Purchase' and  TRIM(CONSTRUCTIONTYPE_2) = 'READY PROPERTY' then 'Builder Purchase Ready'
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='Home Loan Builder Purchase' and TRIM(CONSTRUCTIONTYPE_2)  = 'UNDER CONSTRUCTION' then 'Builder Purchase UC'
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='LAP Balance Transfer plus Top-up' then 'Top Up' 
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='HL Top Up' then 'Top Up'
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='LAP Top up' then 'Top Up'
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='LAP Top Up' then 'Top Up'
WHEN FINTYPE = 'NP' AND  TRIM(LOAN_PURPOSE) ='Non Residential Property Purchase' then 'NRP'
Else 'Unknown'
END AS LOAN_PURPOSE_MAIN2,

CASE WHEN UPPER(COLLATERAL_TYPE) LIKE '%INDUSTRIAL%' OR UPPER(PROPERTY_TYPE) LIKE '%INDUSTRIAL%' OR 
UPPER(LOAN_PURPOSE) LIKE '%INDUSTRIAL%' THEN 1
ELSE 0
END AS INDUSTRIAL_PROPERTY_FLAG,

CASE WHEN STATUS_SEG = 'B) Rejected' AND DETAILED_STATUS = 'Reject_Ops' THEN 'A) Out of Analysis Reject'
WHEN STATUS_SEG = 'B) Rejected' AND DETAILED_STATUS <> 'Reject_Ops' THEN 'B) In Analysis Reject'
ELSE 'C) Not a Reject'
END AS REJECT_FLAG,

CASE WHEN FIRST_REJECT_DATE<FIRST_PSV THEN 'A) PRE FIRST PSV'
ELSE 'B) POST FIRST PSV'
END AS QDE_REJECT,

CASE WHEN lower(Reject_Reason_one) like '%cancel%' then 'A) Cancellation Reject'
WHEN TYPES_OF_REJECT IS NULL then 'NULL'
ELSE 'B) Not a Cancellation Reject'
END AS CANCEL_FLAG,CC.COUNTRYNAME

FROM SJCron_CREDITDASHBOARD_CUBE_Weekly A
left join CIF_COUNTRYCODE_VIEW CC on A.CIF = CC.CUSTCIF;

Delete from DTCRONinter
where FINREFERENCE = 'GHF1101HL0000397' and CONSTRUCTIONTYPE_2 = 'UNDER CONSTRUCTION';

Delete from DTCRONinter
where FINREFERENCE = 'GHF1101LP0010678' and CONSTRUCTIONTYPE_2 = 'READY PROPERTY';


drop table DTCRON_GHF;
create table DTCRON_GHF as (select * from DTCRONinter);

--SELECT * FROM DTCRON_GHF

---- DTCRON GLF PLF ------ GFL_PLF.PUBLIC.

create or replace view GFL_PLF.PUBLIC.CIF_COUNTRYCODE_VIEW as 
SELECT DISTINCT A.CUSTCIF, A.AFTCUSTADDRCOUNTRY ,
case when L.COUNTRY is null then A.AFTCUSTADDRCOUNTRY
else L.COUNTRY 
end as CountryName 
from 
    (SELECT DISTINCT A.CUSTCIF, A.AFTCUSTADDRCOUNTRY
    FROM GFL_PLF.PUBLIC.MIS_CHANGE_IN_DEMOGRAPHIC_DETAILS_VIEW A
    LEFT JOIN
    (
    SELECT distinct CUSTCIF, MAX(AUDITDATETIME) as maxTime
    FROM GFL_PLF.PUBLIC.MIS_CHANGE_IN_DEMOGRAPHIC_DETAILS_VIEW
    WHERE AFTCUSTADDRTYPE = 'PRIRES'
    GROUP BY CUSTCIF
    ) B
    on A.CUSTCIF=B.CUSTCIF
    WHERE A.AUDITDATETIME=B.maxTime
    AND A.AFTCUSTADDRTYPE = 'PRIRES'
    ) A
left join SAMPLE_DB.PUBLIC.CIFCOUNTRY L on L.CIF = A.CUSTCIF;


--CIBIL APP & COAPP Code
DROP TABLE GFL_PLF.PUBLIC.minCIBILCoAppLookupTable;
CREATE TABLE GFL_PLF.PUBLIC.minCIBILCoAppLookupTable AS
SELECT DISTINCT MAIN.LAN_ID, IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp) minCIBILCoApp,
CASE WHEN IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)=-1 THEN 'A) -1' 
WHEN IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)>1 AND  
IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)<650 THEN 'B) <650'
WHEN IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)>=650 AND 
IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)<=699 THEN 'C) 650-699'
WHEN IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)>699 AND 
IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)<=749 THEN 'D) 700-749'
WHEN IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)>749 AND  
IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)<=800 THEN 'E) 750-800'
WHEN IFNULL(A.minCIBILCoApp, MAIN.minCIBILCoApp)>800 THEN 'F) >800' 
ELSE 'G) Not Available'
END AS CIBILCAT2
FROM 
(select LAN_ID, MIN(CSExtractedCoApp) as minCIBILCoApp
from 
(
SELECT distinct LAN_ID,
CASE WHEN CIBIL_SCORE LIKE '%-1%' THEN TRY_TO_NUMBER(RIGHT(CIBIL_SCORE,2))
ELSE TRY_TO_NUMBER(RIGHT(CIBIL_SCORE,3)) END AS CSExtractedCoApp
from GFL_PLF.PUBLIC.MAIN_CO_APPLICANT_CIBIL_VIEW
WHERE CUSTOMERCATEGORY='Co-Applicant' 
)
GROUP BY LAN_ID) MAIN
LEFT JOIN 
(select LAN_ID, MIN(CSExtractedCoApp) as minCIBILCoApp 
from 
(
SELECT distinct LAN_ID,
CASE WHEN CIBIL_SCORE LIKE '%-1%' THEN TRY_TO_NUMBER(RIGHT(CIBIL_SCORE,2))
ELSE TRY_TO_NUMBER(RIGHT(CIBIL_SCORE,3)) END AS CSExtractedCoApp
from GFL_PLF.PUBLIC.MAIN_CO_APPLICANT_CIBIL_VIEW
WHERE CUSTOMERCATEGORY='Co-Applicant' AND CIBIL_SCORE <> '000-1'
)
GROUP BY LAN_ID
) A 
ON MAIN.LAN_ID = A.LAN_ID;


DROP TABLE GFL_PLF.PUBLIC.SJCron_CREDITDASHBOARD_CUBE_Weekly;
CREATE TABLE GFL_PLF.PUBLIC.SJCron_CREDITDASHBOARD_CUBE_Weekly
AS
select distinct F.*,
case when F.LOGINSTATUS = 'A) Login' then '1'else '0'
end as LOGIN_FLAG,
case when F.STATUS = 'Booked' then '1'else '0'
end as BOOKING_FLAG,
case when F.STATUS_SEG = 'A) Final Sanction' then '1'else '0'
end as SANCTION_FLAG,
case when DV.LOAN_STATUS = 'Active' and F.DISB_AMOUNT is not Null  then '1'else '0'
end as DISBURSED_FLAG,
case when F.STATUS_SEG ='WIP'then '1'else '0'
end as WIP_FLAG,
case when F.STATUS_SEG = 'B) Rejected' then '1'else '0'
end as Reject_FLAG_Sales,
case when F.STATUS_SEG = 'C) Income Sanction' then '1' else '0'
end as INCOME_SANCTION_FLAG,
case when SANCTION_FLAG ='1' then F.FINALLOANAMOUNT/10000000 else '0'
end as SANCTION_CR,
case when BOOKING_FLAG = '1' then F.BOOKED_AMOUNT/10000000 else '0'
end as BOOKED_CR,
case when DISBURSED_FLAG ='1' then F.DISB_AMOUNT/10000000 else '0'
end as DISBURSED_CR,
case when INCOME_SANCTION_FLAG = '1' then F.FINALLOANAMOUNT/10000000 else '0'
end as INCOME_SANCTION_CR,
case when F.BOOKED_AMOUNT is null then 0
else ((F.ROI) * (F.BOOKED_AMOUNT))
end as WRO,
A.RISK_SCORE,A.NETSALARY/100 as NETSALARY,A.STATUS_DATES,C.GHFSM,C.GHFSM_NAME,C.GHFAM_BD,C.GHFAM_BD_NAME,C.GHFAM,C.GHFAM_NAME, --A.RESIDENTIAL_STATUS,
A.TYPES_OF_REJECT,A.REJECT_REMARKS,A.EMPLOYERNAME,A.CITY,
A.YEAREXPERIENCE,A.CUSTOMER_NAME,
A.CUSTOMER_TYPE,A.CREDITWORTH,A.INCOME_PROGRAM_TYPE,A.BORROWER_TYPE,A.OCR_ID,A.LEADID,A.OCCUPATION,
A.FRESH_LOGIN,A.PREVIOUS_STAGES,A.ACTIVITY,A.INCOME_SANCTION,A.FINAL_SANCTION,A.RECIEPTS,
--A.BT_INSTITUTION_OTHER,A.BT_LOAN_LAN,A.BT_OUTSTANDING, A.BT_INSTITUTION,
A.SAL_OTHERINCOME,A.SE_OTHERINCOME,A.CORP_RECEIPTS,
A.CORP_NET_PROFIT,A.CORP_OTHERINCOME,A.FINAL_ELIGIBLE_INCOME,A.FTR,A.NO_OF_DEVIATIONS,A.INDIVIDUAL_DEVIATION_FLAG,A.CUST_AGE,
A.CUST_EMP_TYPE,G.SUBSECTOR as SUBSECTOR_,G.BORROWER_TYPE as CUST_TYPE,G.CURRENT_USER_WORKING_ROLECODE,G.CURRENT_USER_WORKING_ACTIVITY,
VT.FIRST_CO,VT.FIRST_CREDIT_MANAGER,VT.ADDITIONAL_TAG_OF_PROPERTY_IDENTIFICATION,VT.SUBMIT_TO_CRM_NAME,
CASE WHEN VT.FIRST_CREDIT_MANAGER IS NULL 
THEN FC.NEXT_USER
ELSE VT.FIRST_CREDIT_MANAGER
END AS CREDIT_MANAGER_UPDATED,
A.CIBIL_SCORE,--A.EMPLOYMENT_TYPE,
A.BRANCHDESC,A.LOAN_TYPE,A.CUSTINDUSTRY,A.SECTOR,A.QUALIFICATION,--A.NETSALARY*12 as NETSALARY_ANNUAL,
A.SCHEME_MORATORIUM, A.SCHEME_MORATORIUM2, 
B.FOIR,B.LTV,--B.PROJECTNAME,
C.SANCTION_AMOUNT,C.DISBURSED_AMOUNT as DISBURSED_AMOUNT2,C.TOTAL_TENOR,C.AGE,
(E.REPAYMARGIN)+15.86 as ROI2,
D.LOAN_AMOUNT as BOOKED_AMOUNT_OTHER, 
G.PEP, --G.CRE,
H.PSL, 
H.EMI_BREAK_SCHEME, H.PARALLEL_FUNDING_SCHEME, 
H.RISK_CATEGORY, H.DELINQUENCY, A.CIF, --J.MAIN_APPLICANT_GENDER, --I.AFTCUSTADDRCOUNTRY, --A.LOAN_PURPOSE, 
A.CORP_GROSS_TO, A.GROSSTO, --K.APPLICANT_RESIDENCE_ADDRESS, 
L.TotalIncomeAcrossApplicants, 
A.NHBSCHEME, A.SUBSECTOR, A.NATURE_OF_EMPLOYEE, M.readyPropertyFlag, E.STEPFINANCE, E.ALLOWGRCPERIOD,
P.minCIBILCoApp, P.CIBILCAT2,
R.CONSTRUCTIONTYPE as CONSTRUCTIONTYPE_2, G.BORROWER_TYPE as CUST_CAT,MDS.MTDDISBSALES,MDS.MTDPREMIUMSALES,
--'' AS BT_INSTITUTION, '' AS BT_INSTITUTION_OTHER, '1990-01-01 00:00:00.000' AS BT_LOAN_START_DATE, '' AS BT_OUTSTANDING, 
--'' AS BT_LOAN_LAN, '' AS SUBPRODUCT, 
S.BT_INSTITUTION, S.BT_INSTITUTION_OTHER, S.BT_LOAN_START_DATE, S.BT_OUTSTANDING, S.BT_LOAN_LAN, S.SUBPRODUCT,
S.SELFEMPLOYEDRISK, S.SELFEMPYRISKSEGMT, S.TAT_REASON,
T.BUILDERIDNAME, U.COLLATERAL_TYPE, V.PROPERTY_TYPE,
CASE WHEN TYPES_OF_REJECT like '%,%' then LEFT(TYPES_OF_REJECT, CHARINDEX(',', TYPES_OF_REJECT) - 1)
ELSE TYPES_OF_REJECT
END AS Reject_Reason_one, 
case when F.STATUS IN ('Sanction','Booked','Income Sanction','Cancelled') then 'A) Sanction'
when F.STATUS = 'Rejected' then 'B) Reject'
else 'C) WIP'
end as FINALSTATUS,
case when F.STATUS='Instant Sanction Queue' THEN 'B) Instant Sanction Queue' 
ELSE 'A) Login'
END AS LOGINSTATUS_OTHER, 
CASE WHEN FINALSTATUS='A) Sanction' AND F.STATUS <> 'Income Sanction' THEN 'A) Final Sanction'
WHEN FINALSTATUS='A) Sanction' AND F.STATUS = 'Income Sanction'  THEN 'B) Income Sanction'
ELSE 'C) Others'
END AS IncomeSanctionFlag, 
case when E.FINTYPE IN ('HL','HT') then 'A) HL & HT'
else 'B) FL, FT, LT'
end as LOAN_TYPE_FILTER,

case when A.RESIDENTIAL_STATUS <> 'NR' and LOWER(A.LOAN_PURPOSE) LIKE '%plot%' then 'Plot Loan'
when A.LOAN_PURPOSE='Home Loan Resale' THEN 'Resale'
else 'Under Construction'
end as CONSTRUCTION_TYPE, --Ready Resale (Cat shuold be update) --when A.RESIDENTIAL_STATUS = 'NR' then 'NRI'

case when C.AGE >=18 and C.AGE <= 24 then 'A) 18-24'
when C.AGE >24 and C.AGE <= 29 then 'B) 25-29'
when C.AGE >29 and C.AGE <= 34 then 'C) 30-34'
when C.AGE >34 and C.AGE <= 44 then 'D) 35-44'
when C.AGE >44 and C.AGE <= 54 then 'E) 45-54'
when C.AGE >54  then 'F) 55+'
else 'G) Unknown'
end as AGE_CAT,
case when C.TOTAL_TENOR<=120 then 'A) LTE 120'
when C.TOTAL_TENOR>120 and C.TOTAL_TENOR<=180 then 'B) GT120-LTE180'
when C.TOTAL_TENOR>180 and C.TOTAL_TENOR<=240 then 'C) GT180-LTE240'
when C.TOTAL_TENOR>240 and C.TOTAL_TENOR<=360  then 'D) GT240-LTE360'
when C.TOTAL_TENOR>360 then 'E) GT360'
else 'F) Not Available'
end as TENURE_CAT,

case when B.LTV<50 then 'A) Less than 50'
when B.LTV>=50 and B.LTV<75 then 'B) 50-75'
when B.LTV>=75 and B.LTV<=80 then 'C) 75-80'
when B.LTV>80 and B.LTV<=90 then 'D) 80-90'
else 'E) Others'
end as LTV_CAT, 

case when B.FOIR<50 then 'A) Less than 50'
when B.FOIR>=50 and B.FOIR<65 then 'B) 50-65'
when B.FOIR>=65 and B.FOIR<=80 then 'C) 65-80'
when B.FOIR>80 and B.FOIR<=85 then 'D) 80-85'
when B.FOIR>85 then 'E) 85+'
else 'F) Others'
end as FOIR_CAT,

case when B.FOIR<50 then 'A) Less than 50'
when B.FOIR>=50 and B.FOIR<65 then 'B) 50-65'
when B.FOIR>=65 and B.FOIR<70 then 'C) 65-70'
when B.FOIR>=70 and B.FOIR<75 then 'D) 70-75'
when B.FOIR>=75 and B.FOIR<=80 then 'E) 75-80'
when B.FOIR>80 and B.FOIR<=85 then 'F) 80-85'
when B.FOIR>85 then 'G) 85+'
else 'H) Others'
end as FOIR_CAT2,

case when A.YEAREXPERIENCE>=0 and A.YEAREXPERIENCE<=5 then 'A) Upto 5'
when A.YEAREXPERIENCE>5 and A.YEAREXPERIENCE<=10 then 'B) 5-10'
when A.YEAREXPERIENCE>10 and A.YEAREXPERIENCE<=20 then 'C) 10-20'
when A.YEAREXPERIENCE>20 then 'D) >20'
else 'E) Not Available'
end as YEARS_EXP_CAT, 
C.REQUESTED_AMOUNT/1000000000 as reqLoanAmtDerived,


CASE WHEN F.STATUS IN ('Sanction','Booked','Income Sanction','Cancelled') THEN C.SANCTION_AMOUNT/10000000 ELSE 0
END AS sanctionAmtDerived,

case when F.STATUS='Booked' THEN 'A) Disbursed' ELSE 'B) Not Available' END as DISBURSEDSTATUS,

CASE WHEN F.STATUS='Booked' THEN C.DISBURSED_AMOUNT/10000000 ELSE 0 END AS disbAmtDerived,

D.LOAN_AMOUNT/10000000 bookAmountDerived,    
CASE WHEN A.CIBIL_SCORE LIKE '%-1%' THEN TRY_TO_NUMBER(RIGHT(A.CIBIL_SCORE,2)) 
ELSE TRY_TO_NUMBER(RIGHT(A.CIBIL_SCORE,3)) END AS cibilExtracted,    
CASE WHEN A.RISK_SCORE is null THEN 'Z) NULL'
WHEN A.RISK_SCORE=0 THEN 'Y) Zero'
WHEN A.RISK_SCORE<45 THEN 'A) Less than 45' 
WHEN A.RISK_SCORE>=45 AND A.RISK_SCORE<=49 THEN 'B) Market 45-49'
WHEN A.RISK_SCORE>49 AND A.RISK_SCORE<=69 THEN 'C) Market Plus 50-69'
WHEN A.RISK_SCORE>69 THEN 'D) Plus Plus > 70'
ELSE 'G) Not Available'
END AS riskScoreCat,
CASE WHEN A.RISK_SCORE >=0  AND  A.RISK_SCORE <10 THEN  'A) Upto 10' --Risk score null, then null
WHEN A.RISK_SCORE >=10  AND  A.RISK_SCORE <20 THEN  'B) 10 to 20' 
WHEN A.RISK_SCORE >=20  AND  A.RISK_SCORE <30 THEN  'C) 20 to 30' 
WHEN A.RISK_SCORE >=30  AND  A.RISK_SCORE <40 THEN  'D) 30 to 40' 
WHEN A.RISK_SCORE >=40  AND  A.RISK_SCORE <50 THEN  'E) 40 to 50' 
WHEN A.RISK_SCORE >=50  AND  A.RISK_SCORE <60 THEN 'F) 50 to 60' 
WHEN A.RISK_SCORE >=60  AND  A.RISK_SCORE <70 THEN 'G) 60 to 70' 
WHEN A.RISK_SCORE >=70  AND  A.RISK_SCORE <80 THEN 'H) 70 to 80' 
WHEN A.RISK_SCORE >=80  AND  A.RISK_SCORE <90 THEN 'I) 80 to 90' 
WHEN A.RISK_SCORE >=90  AND  A.RISK_SCORE <=100 THEN 'J) 90 to 100' 
WHEN A.RISK_SCORE =0 THEN 'L) Zero'
ELSE 'M) Not available'
END AS RISKSCOREMICROBANDS,
E.ELIGIBILITYMETHOD,DV.CHANNELCODE,DV.CUSTOMER_OWNERSHIP,DV.REFERENCE2,DV.REFERENCE3,DV.DST_CODE,
DV.CHANNEL_PARTNER_EMPLOYEE_CODE,DV.RESERVED_CHANNEL_CODE,DX.Processing_Fee, DV.END_USAGE_FUNDS
--,A.RN

FROM GFL_PLF.PUBLIC.VSJ4_NBFC F    ----Base Table + LOS Data
LEFT JOIN (SELECT DISTINCT * FROM GFL_PLF.PUBLIC.MIS_CREDIT_LOAN_STATUS_VIEW3 
           WHERE SI_NO<>'1365') as A  ON F.FINREFERENCE=A.LANID
left join (SELECT DISTINCT LAN, FOIR, LTV, PROJECTNAME FROM GFL_PLF.PUBLIC.MIS_LOAN_LEVEL_DETAILS_VIEW) as B on F.FINREFERENCE = B.LAN
left join GFL_PLF.PUBLIC.LOAN_DATA3 as C on F.FINREFERENCE = C.FINREFERENCE
left join GFL_PLF.PUBLIC.MIS_FINANCE_VIEW as E on F.FINREFERENCE = E.FINREFERENCE
left join GFL_PLF.PUBLIC.MIS_DISBURSEMENT_NEW_VIEW as D on F.FINREFERENCE = D.FINREFERENCE
left join (SELECT DISTINCT LAN, PEP, CRE, BORROWER_TYPE,SUBSECTOR,CURRENT_USER_WORKING_ROLECODE,CURRENT_USER_WORKING_ACTIVITY
           FROM GFL_PLF.PUBLIC.MIS_LOAN_LEVEL_DETAILS_VIEW) G ON F.FINREFERENCE=G.LAN
--left join (SELECT DISTINCT CUSTCIF, AFTCUSTADDRCOUNTRY FROM MIS_CHANGE_IN_DEMOGRAPHIC_DETAILS_VIEW 
           --WHERE AFTCUSTADDRTYPE = 'PRIRES') I ON A.CIF = I.CUSTCIF
--left join (SELECT DISTINCT LAN, MAIN_APPLICANT_GENDER FROM MIS_CUSTOMER_LEVEL_INFORMATION_VIEW) J ON F.FINREFERENCE = J.LAN
--left join (SELECT DISTINCT LAN, APPLICANT_RESIDENCE_ADDRESS FROM MIS_CERSAI_CHARGE_CREATION_VIEW) K ON F.FINREFERENCE = K.LAN
--left join (SELECT DISTINCT LANID, GPLFLAG FROM GPLFLAGLOOKUPTABLE) P ON F.FINREFERENCE = P.LANID
left join (SELECT DISTINCT FINREFERENCE, CONSTRUCTIONTYPE FROM GFL_PLF.PUBLIC.mis_collateral_details_view) R 
           ON F.FINREFERENCE = R.FINREFERENCE
left join (select DISTINCT LAN_ID, minCIBILCoApp, CIBILCAT2 FROM GFL_PLF.PUBLIC.minCIBILCoAppLookupTable) P ON F.FINREFERENCE = P.LAN_ID
left join (SELECT DISTINCT FINANCE_REFERENCE, NEXT_USER FROM FIRST_CMS) FC ON F.FINREFERENCE = FC.FINANCE_REFERENCE
left join 
(
  SELECT DISTINCT REFERENCE, 'READY PROPERTY' as readyPropertyFlag 
  FROM SAMPLE_DB.PUBLIC.COLLATERAL_DATA 
  WHERE REFERENCE is not null AND CONSTRUCTIONTYPE='READY PROPERTY'
) M ON F.FINREFERENCE=M.REFERENCE
left join 
(
  SELECT DISTINCT LANID, PSL, EMI_BREAK_SCHEME, PARALLEL_FUNDING_SCHEME, 
  RISK_CATEGORY, DELINQUENCY FROM GFL_PLF.PUBLIC.MIS_CREDIT_LOAN_STATUS_VIEW3
) H ON F.FINREFERENCE=H.LANID
left join
(
  SELECT DISTINCT FINREFERENCE, SUM(ANNUALINCOME) as TotalIncomeAcrossApplicants
FROM GFL_PLF.PUBLIC.MIS_NET_SAL_VIEW
GROUP BY FINREFERENCE
) L ON F.FINREFERENCE = L.FINREFERENCE
left join GFL_PLF.PUBLIC.V_TAT_DATA VT on F.FINREFERENCE = VT.LAN
left join GFL_PLF.PUBLIC.MIS_DISBURSEMENT_VIEW  DV on DV.LOAN_ACCOUNTNO = F.FINREFERENCE
left join GFL_PLF.PUBLIC.MIS_LOAN_EXTDETAILS_VIEW S on S.REFERENCE = F.FINREFERENCE
left join GFL_PLF.PUBLIC.APFNO_MASTER_VIEW T on A.PROJECTID = cast(T.PROJECTID as varchar(16777216))
left join (SELECT LANID, LISTAGG (COLLATERAL_TYPE,', ') AS COLLATERAL_TYPE
                                          FROM GFL_PLF.PUBLIC.MIS_CREDIT_LOAN_STATUS_VIEW3
                                          GROUP BY LANID) U 
           ON F.FINREFERENCE = U.LANID
left join (SELECT LOAN_ACCOUNTNO, LISTAGG (PROPERTYTYPE, ', ') AS PROPERTY_TYPE
                                   FROM GFL_PLF.PUBLIC.MIS_DISBURSEMENT_VIEW
                                   GROUP BY LOAN_ACCOUNTNO) V 
           ON F.FINREFERENCE = V.LOAN_ACCOUNTNO
left join
(select FINREFERENCE,sum(DISB) as MTDDISBSALES ,sum(TOTAL_PREMIUM) as MTDPREMIUMSALES
from SAMPLE_DB.PUBLIC.MTD_DISB
group by FINREFERENCE) MDS on F.FINREFERENCE = MDS.FINREFERENCE
left join (select a.FINREFERENCE,sum(a.ACTUAL_AMOUNT) Processing_Fee
from GFL_PLF.PUBLIC.mis_fee_detail_v a
inner join
(select FINREFERENCE, max(LAST_UPDATED)LAST_UPDATED from GFL_PLF.PUBLIC.mis_fee_detail_v group by FINREFERENCE) b
on a.FINREFERENCE= b.FINREFERENCE
and a.LAST_UPDATED = b.LAST_UPDATED
group by a.FINREFERENCE) DX on F.FINREFERENCE = DX.FINREFERENCE;


DROP TABLE GFL_PLF.PUBLIC.DTCRONinter;
CREATE TABLE GFL_PLF.PUBLIC.DTCRONinter
AS
SELECT A.*,  
case when NETSALARY<'475000' then 'A) <4.75L'
when NETSALARY>='475000' and NETSALARY<'675000' then 'B) 4.75L-6.75L'
when NETSALARY>'675000' and NETSALARY<='870000' then 'C) 6.75L-8.7L'
when NETSALARY>'870000' and NETSALARY<='1550000' then 'D) 8.7L-15.5L'
when NETSALARY>'1550000' and NETSALARY<='2850000' then 'E) 15.5L-28.5L'
when NETSALARY>'2850000' then 'F) >28.5L' 
else 'G) Unknown'
end as ANNUAL_SALARY_CAT1, 

case when NETSALARY<'475000' then 'A) <4.75L'
when NETSALARY>='475000' and NETSALARY<'675000' then 'B) 4.75L-6.75L'
when NETSALARY>'675000' and NETSALARY<='870000' then 'C) 6.75L-8.7L'
when NETSALARY>'870000' and NETSALARY<='1230000' then 'D) 8.7L-12.3L'
when NETSALARY>'1230000' and NETSALARY<='2200000' then 'E) 12.3L-22L'
when NETSALARY>'2200000' then 'F) >22L' 
else 'G) Unknown'
end as ANNUAL_SALARY_CAT2,
case when NETSALARY<'475000' then 'A) <4.75L'
when NETSALARY>='475000' and NETSALARY<'675000' then 'B) 4.75L-6.75L'
when NETSALARY>'675000' and NETSALARY<='870000' then 'C) 6.75L-8.7L'
when NETSALARY>'870000' and NETSALARY<='1230000' then 'D) 8.7L-12.3L'
when NETSALARY>'1230000' and NETSALARY<='1870000' then 'E) 12.3L-18.7L'
when NETSALARY>'1870000' then 'F) >18.7L' 
else 'G) Unknown'
end as ANNUAL_SALARY_CAT3,
case when FINBRANCH = 'Mumbai' or FINBRANCH = 'Delhi' then ANNUAL_SALARY_CAT1
when FINBRANCH = 'Bangalore' then ANNUAL_SALARY_CAT2
when FINBRANCH = 'Pune' then ANNUAL_SALARY_CAT3
when FINBRANCH = 'Ahmedabad' then ANNUAL_SALARY_CAT3
else 'Unknown'
end as AnnualSalaryCatBranchWise,   


LTV * reqloanamtDerived as WEIGHTLTVLogin,
FOIR * reqloanamtDerived as WEIGHTFOIRLogin,
ROI * reqloanamtDerived as WEIGHTROILogin,
LTV * sanctionamtDerived as WeightLTVSanction, 
FOIR * sanctionamtDerived as WeightFOIRSanction,
ROI * sanctionamtDerived as WeightROISanction,
LTV * bookAmountDerived as WeightLTVBook,
FOIR * bookAmountDerived as WeightFOIRBook,
ROI * bookAmountDerived as WeightROIBook, 
CASE WHEN CIBILEXTRACTED=-1 THEN 'A) -1'
WHEN CIBILEXTRACTED>1 AND CIBILEXTRACTED<650 THEN 'B) <650'
WHEN CIBILEXTRACTED>=650 AND CIBILEXTRACTED<=699 THEN 'C) 650-699'
WHEN CIBILEXTRACTED>699 AND CIBILEXTRACTED<=749 THEN 'D) 700-749'
WHEN CIBILEXTRACTED>749 AND CIBILEXTRACTED<=800 THEN 'E) 750-800'
WHEN CIBILEXTRACTED>800 THEN 'F) >800' ELSE 'G) Not Available'
END AS CIBILCAT, 

CASE WHEN bookAmountDerived=0 THEN 'Z) Zero'
WHEN bookAmountDerived>0 AND bookAmountDerived<=0.3 THEN 'A) Upto 30 Lacs'
WHEN bookAmountDerived>0.3 AND bookAmountDerived<=0.5 THEN 'B) 30 to 50 Lacs'
WHEN bookAmountDerived>0.5 AND bookAmountDerived<=1 THEN 'C) 50 Lacs to 1Cr'
WHEN bookAmountDerived>1 THEN 'D) More than 1 Cr' ELSE 'E) Not Available'
END AS bookAmountCat_CDB, 


CASE WHEN ROI=6.69 THEN 'A) 6.69'
WHEN ROI<6.69 THEN 'B) <6.69'
WHEN ROI>6.69 AND ROI<=7 THEN 'C) 6.69-7'
WHEN ROI>7 AND ROI<=7.25 THEN 'D) 7-7.25'
WHEN ROI>7.25 AND ROI<=7.5 THEN 'E) 7.25-7.5'
WHEN ROI>7.5 AND ROI<=8 THEN 'F) 7.5-8'
WHEN ROI>8 THEN 'G) >8' ELSE 'H) Others'
END AS ROICAT_CDB, 

CASE WHEN sanctionAmtDerived=0 THEN 'Z) Zero'
WHEN sanctionAmtDerived>0 AND sanctionAmtDerived<=0.3 THEN 'A) Upto 30 Lacs'
WHEN sanctionAmtDerived>0.3 AND sanctionAmtDerived<=0.5 THEN 'B) 30 to 50 Lacs'
WHEN sanctionAmtDerived>0.5 AND sanctionAmtDerived<=1 THEN 'C) 50 Lacs to 1Cr'
WHEN sanctionAmtDerived>1 THEN 'D) More than 1 Cr' ELSE 'E) Not Available'
END AS sanctionAmountCat_CDB,

CASE WHEN FINTYPE IN ('HL','LT','HT') THEN 'A) Secured' 
WHEN FINTYPE IN ('FL','FT') THEN 'B) Unsecured' ELSE 'C) Unknown'
END AS SecuredFlag,

CASE WHEN LOAN_PURPOSE LIKE '%Plot%' THEN 'A) Plot'
WHEN LOAN_PURPOSE LIKE '%Resale%' THEN 'B) Resale' 
WHEN READYPROPERTYFLAG LIKE '%READY PROPERTY%' THEN 'C) Ready'
WHEN FINTYPE IN ('HL','LT') THEN 'D) Balance Transfer' ELSE 'E) Under Construction'
END AS LOAN_PURPOSE_MAIN,

CASE 
WHEN FINTYPE = 'FL' AND  TRIM(LOAN_PURPOSE) ='Flexi Loan Consumer Durable' then 'FL'
WHEN FINTYPE = 'FL' AND  TRIM(LOAN_PURPOSE) ='Flexi Loan Family Expenses' then 'FL'
WHEN FINTYPE = 'FL' AND  TRIM(LOAN_PURPOSE) ='Flexi Loan Others' then 'FL'
WHEN FINTYPE = 'FL' AND  TRIM(LOAN_PURPOSE) ='Flexi Loan Personal Expenses' then 'FL'

WHEN FINTYPE = 'FT' AND  TRIM(LOAN_PURPOSE) ='Flexi Loan Family Expenses' then 'FL'
WHEN FINTYPE = 'FT' AND  TRIM(LOAN_PURPOSE) ='Flexi Loan Others' then 'FL'
WHEN FINTYPE = 'FT' AND  TRIM(LOAN_PURPOSE) ='Flexi Loan Personal Expenses' then 'FL'

WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Home loan BT + Top Up' then 'HL BT'
WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Home Loan Builder Purchase' and  TRIM(CONSTRUCTIONTYPE_2)  = 'READY PROPERTY' then 'Builder Purchase Ready'
WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Home Loan Builder Purchase' and TRIM(CONSTRUCTIONTYPE_2) = 'UNDER CONSTRUCTION' then 'Builder Purchase UC'
WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Home Loan Resale' then 'Resale'
WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Plot plus construction loan' then 'Plot'
WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Plot purchase for construction of home' then 'Plot'
WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Plot purchase only' then 'Plot'
WHEN FINTYPE = 'HL' AND  TRIM(LOAN_PURPOSE) ='Pure Balance Transfer' then 'HL BT'

WHEN FINTYPE = 'HT' AND  TRIM(LOAN_PURPOSE) ='Balance Transfer + Top up' then 'HL BT'
WHEN FINTYPE = 'HT' AND  TRIM(LOAN_PURPOSE) ='Home loan BT + Top Up' then 'HL BT'
WHEN FINTYPE = 'HT' AND  TRIM(LOAN_PURPOSE) ='Home Loan Builder Purchase'  and TRIM(CONSTRUCTIONTYPE_2) = 'READY PROPERTY' then 'Builder Purchase Ready'
WHEN FINTYPE = 'HT' AND  TRIM(LOAN_PURPOSE) ='Home Loan Builder Purchase' and TRIM(CONSTRUCTIONTYPE_2) = 'UNDER CONSTRUCTION' then 'Builder Purchase UC'
WHEN FINTYPE = 'HT' AND  TRIM(LOAN_PURPOSE) ='Plot loan BT' then 'Plot'
WHEN FINTYPE = 'HT' AND  TRIM(LOAN_PURPOSE) ='Pure Balance Transfer' or LOAN_PURPOSE ='Home Loan Balance Transfer' then 'HL BT'

WHEN FINTYPE = 'LP' AND  TRIM(LOAN_PURPOSE) ='Loan against Property' then 'LAP'
WHEN FINTYPE = 'LP' AND  TRIM(LOAN_PURPOSE) ='LAP Balance Transfer' then 'LAP BT'
WHEN FINTYPE = 'LP' AND  TRIM(LOAN_PURPOSE) ='LAP Balance Transfer plus Top-up' then 'LAP BT Top up'
WHEN FINTYPE = 'LP' AND  TRIM(LOAN_PURPOSE) ='Non Residential Property Purchase' then 'NRP'
WHEN FINTYPE = 'LP' AND  TRIM(LOAN_PURPOSE) ='LAP for Refinance' then 'Refinance'

WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='Loan against Property' then 'LAP'
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='Balance Transfer + Top up' then 'Top Up'
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='Home loan BT + Top Up' then 'Top Up' 
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='Home Loan Builder Purchase' and  TRIM(CONSTRUCTIONTYPE_2) = 'READY PROPERTY' then 'Builder Purchase Ready'
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='Home Loan Builder Purchase' and TRIM(CONSTRUCTIONTYPE_2)  = 'UNDER CONSTRUCTION' then 'Builder Purchase UC'
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='LAP Balance Transfer plus Top-up' then 'Top Up' 
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='HL Top Up' then 'Top Up'
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='LAP Top up' then 'Top Up'
WHEN FINTYPE = 'LT' AND  TRIM(LOAN_PURPOSE) ='LAP Top Up' then 'Top Up'
WHEN FINTYPE = 'NP' AND  TRIM(LOAN_PURPOSE) ='Non Residential Property Purchase' then 'NRP'
Else 'Unknown'
END AS LOAN_PURPOSE_MAIN2,

CASE WHEN UPPER(COLLATERAL_TYPE) LIKE '%INDUSTRIAL%' OR UPPER(PROPERTY_TYPE) LIKE '%INDUSTRIAL%' OR 
UPPER(LOAN_PURPOSE) LIKE '%INDUSTRIAL%' THEN 1
ELSE 0
END AS INDUSTRIAL_PROPERTY_FLAG,

CASE WHEN STATUS_SEG = 'B) Rejected' AND DETAILED_STATUS = 'Reject_Ops' THEN 'A) Out of Analysis Reject'
WHEN STATUS_SEG = 'B) Rejected' AND DETAILED_STATUS <> 'Reject_Ops' THEN 'B) In Analysis Reject'
ELSE 'C) Not a Reject'
END AS REJECT_FLAG,

CASE WHEN FIRST_REJECT_DATE<FIRST_PSV THEN 'A) PRE FIRST PSV'
ELSE 'B) POST FIRST PSV'
END AS QDE_REJECT,

CASE WHEN lower(Reject_Reason_one) like '%cancel%' then 'A) Cancellation Reject'
WHEN TYPES_OF_REJECT IS NULL then 'NULL'
ELSE 'B) Not a Cancellation Reject'
END AS CANCEL_FLAG,CC.COUNTRYNAME

FROM GFL_PLF.PUBLIC.SJCron_CREDITDASHBOARD_CUBE_Weekly A
left join CIF_COUNTRYCODE_VIEW CC on A.CIF = CC.CUSTCIF;  

Delete from GFL_PLF.PUBLIC.DTCRONinter    
where FINREFERENCE = 'GHF1101HL0000397' and CONSTRUCTIONTYPE_2 = 'UNDER CONSTRUCTION';

Delete from GFL_PLF.PUBLIC.DTCRONinter
where FINREFERENCE = 'GFL3401LP0000361' and CONSTRUCTIONTYPE_2 = 'UNDER CONSTRUCTION';

drop table GFL_PLF.PUBLIC.DTCRON_NBFC;
create table GFL_PLF.PUBLIC.DTCRON_NBFC as (select * from GFL_PLF.PUBLIC.DTCRONinter);

drop table DTCRON;
create table DTCRON as 
(SELECT * FROM SAMPLE_DB.PUBLIC.DTCRON_GHF
UNION ALL
SELECT * FROM GFL_PLF.PUBLIC.DTCRON_NBFC);

--SET today = TO_DATE(CONVERT_TIMEZONE('Asia/Kolkata',CURRENT_TIMESTAMP()));
--SET DTCron_Master=(SELECT 'DTCron_Master' || '_' || TO_VARCHAR($today, 'DDMMYYYY'));
--CREATE TABLE IDENTIFIER($DTCron_Master) as
--select distinct * from DTCRON;

--SALES ADOPTION
CREATE or Replace Table MIS_QUERY_MANAGEMENT_VIEW_ADOPTION AS
SELECT A.*, B.FINBRANCH,
CONCAT(YEAR(DATE_AND_TIME_RAISED_BY),'_',MONTH(DATE_AND_TIME_RAISED_BY)) RAISED_ON_YEAR_MONTH,
CONCAT(YEAR(RESPONSE_ON),'_',MONTH(RESPONSE_ON)) RESPONSE_ON_YEAR_MONTH
FROM MIS_QUERY_MANAGEMENT_VIEW A
LEFT JOIN DTCron AS B
ON A.LAN = B.FINREFERENCE;
Delete from MIS_QUERY_MANAGEMENT_VIEW_ADOPTION where LAN in (select LAN from errorlan);



--Mumbai FTD YTD
--Start

-- Final Sanction FTD
Drop table FS_FTD;
Create table FS_FTD as
(select distinct a.FINREFERENCE, b.CIF, b.CUSTOMER_NAME, b.LOAN_TYPE, b.FINALLOANAMOUNT, b.PROJECTNAME, a.FIRST_PSV
from VSJ4 a left join DTCRON b 
on a.FINREFERENCE = b.FINREFERENCE
where TO_DATE(a.FIRST_PSV) >= DATEADD(Day ,-7, current_date) and TO_DATE(a.FIRST_PSV) <= DATEADD(Day ,-1, current_date)
and a.FINBRANCH = 'Mumbai' and a.STATUS = 'Sanction');


-- All Disbursement FTD
Drop table DISB_FTD;
Create table DISB_FTD as
(select a.FINREFERENCE, b.CIF, b.CUSTOMER_NAME, b.LOAN_TYPE, b.FINALLOANAMOUNT, b.PROJECTNAME, a.BOOKING_DATE 
from VSJ4 a left join DTCRON b 
on a.FINREFERENCE = b.FINREFERENCE
where TO_DATE(a.BOOKING_DATE) >= DATEADD(Day ,-7, current_date) and TO_DATE(a.BOOKING_DATE) <= DATEADD(Day ,-1, current_date)  
and a.FINBRANCH = 'Mumbai' and a.STATUS = 'Booked');


-- Income Sanction FTD
Drop table IS_FTD;
Create table IS_FTD as
(select a.FINREFERENCE, b.CIF, b.CUSTOMER_NAME, b.LOAN_TYPE, b.FINALLOANAMOUNT, b.PROJECTNAME, a.FIRST_ENTRY_TO_COLLATERAL 
from VSJ4 a left join DTCRON b 
on a.FINREFERENCE = b.FINREFERENCE
where TO_DATE(a.FIRST_ENTRY_TO_COLLATERAL) >= DATEADD(Day ,-7, current_date) and TO_DATE(a.FIRST_ENTRY_TO_COLLATERAL) <= DATEADD(Day ,-1, current_date) 
and a.FINBRANCH = 'Mumbai' and a.STATUS = 'Income Sanction');



-- Total PSV Stage YTD
Drop table FS_YTD;
Create table FS_YTD as
(
select distinct a.FINREFERENCE, a.NEXTROLECODE, a.ROLECODE,
b.CIF, b.CUSTOMER_NAME, b.LOAN_TYPE, b.FINALLOANAMOUNT, b.PROJECTNAME, a.FIRST_PSV
from VSJ4 a left join DTCRON b 
on a.FINREFERENCE = b.FINREFERENCE
where TO_DATE(a.FIRST_PSV) <= DATEADD(day,-1,getdate())  and a.FINBRANCH = 'Mumbai' and a.STATUS = 'Sanction'
);

--Select distinct * from trial

--Select * from VSJ4Cron_MIS_FINANCE_VIEW_WLOANSTATUS_2 a
--where TO_DATE(a.FIRST_PSV) < DATEADD(day,-1,getdate())  and a.FINBRANCH = 'Mumbai' and a.STATUS = 'Sanction';



-- Total Disbursed YTD
Drop table DISB_YTD;
Create table DISB_YTD as
(select distinct a.*, b.CIF, b.CUSTOMER_NAME,b.PROJECTNAME as Proj_Name
from VSJ4 a left join DTCRON b 
on a.FINREFERENCE = b.FINREFERENCE
where --TO_DATE(a.BOOKING_DATE) > TO_DATE('31/03/21','dd/mm/yy') and
TO_DATE(a.BOOKING_DATE) <= DATEADD(day,-1,getdate()) and a.FINBRANCH = 'Mumbai' and a.STATUS = 'Booked');

-- Total Collateral Stage YTD
Drop table IS_YTD;
Create table IS_YTD as
(select distinct a.FINREFERENCE,a.NEXTROLECODE, a.ROLECODE, b.CIF, b.CUSTOMER_NAME, b.LOAN_TYPE, b.FINALLOANAMOUNT, b.PROJECTNAME, a.FIRST_ENTRY_TO_COLLATERAL 
from VSJ4 a left join DTCRON b 
on a.FINREFERENCE = b.FINREFERENCE
where TO_DATE(a.FIRST_ENTRY_TO_COLLATERAL) <= DATEADD(day,-1,getdate()) and a.FINBRANCH = 'Mumbai' and a.STATUS = 'Income Sanction')

--SELECT * FROM LOS_SUMMARY















'''






















for i in loan_view.columns:
    a=list(loan_view[i].unique())
    # a.sort()
    print(a)

def columncheckview(cols):
    column_directory={}
    column_directory['loan_view']=['BORROWER_TYPE',
     'BT_LOAN_LAN',
     'BT_LOAN_START_DATE',
     'BT_MOB',
     'BT_OUTSTANDING',
     'CR_EXPOSURE',
     'ROI',
     'GRACE_TERMS',
     'CALCULATE_TERMS',
     'TOTAL_TENOR',
     'NUMBER_OF_TERMS',
     'DEEMED_OVD_DOCUMENC1',
     'DEEMED_OVD_DOCUMENC2',
     'DEEMED_OVD_DOCUMENC3',
     'DEEMED_OVD_DOCUMENT',
     'DELAY_REASON',
     'DISBTDOCKRECEIVEDA',
     'DESIGNATION',
     'DISTRICT',
     'DOCKET_BARCODE',
     'DOCKET_LOCATION',
     'DOCUMENT_DATE',
     'ELIGIBILITY_METHOD',
     'EMPLOYEE_CODE',
     'EMPLOYEE_NUMBER',
     'END_USAGE_FUNDS',
     'END_USE_FOR_TOPUP',
     'FINAL_FOIR',
     'FINAL_LOAN_AMOUNT',
     'FINAL_LTV',
     'FTR',
     'GBLMET',
     'GPL_FLAG',
     'HUNTER_RCU_STATUS',
     'HUNTER_STATUS',
     'INSTRUCTION_UID',
     'LAN_HUNTER_STATUS',
     'LATITUDE',
     'LENDING_TYPE',
     'LOAN_IN_GHF',
     'LOANDATETIME',
     'LONGITUDE',
     'MAX_LOAN_AMOUNT',
     'MAX_TENURE',
     'NAME_OF_FINANCE_INSTITUTE',
     'NAMEOFFININST',
     'OVD',
     'OVD_TO_BE_COLLECTED',
     'OVD_TO_BE_COLLECTED1',
     'OVD_TO_BE_COLLECTED2',
     'OVD_TO_BE_COLLECTED3',
     'PEP',
     'PROPERTY_IDENTIFIED',
     'PSL',
     'QUERY_RAISED',
     'QUERY_RESOLVED',
     'REFERENCE',
     'REGISTRATION_NUMBER',
     'RELATIONSHIP_WITH_A1',
     'RELATIONSHIP_WITH_AP',
     'REMARK',
     'RISK_CATEGORIZATION',
     'SAP_ASM_CODE',
     'SAP_CPC',
     'DST_CODE',
     'SAP_REF_CODE1',
     'SAP_REF_CODE2',
     'SAP_REF_CODE3',
     'SAP_REF_CODE4',
     'SAP_REF_CODE5',
     'SAP_REF_CODE6',
     'SBLMET',
     'SCHEME_CODE',
     'SCHEME_MORATORIUM',
     'SELF_EMP_RISK_SCORE',
     'SEQUENCE_NUMBER',
     'SPECIFY_OTHER_ENDUS',
     'SRO_DISTRICT',
     'SRO_PINCODE',
     'SRO_STATE',
     'SRO_TALUKA',
     'STAGE_OF_CONSTRUCT',
     'STATE',
     'STATE2',
     'SUB_REGISTRAR_SRO',
     'SURVEY_NUMBER_GAT_NUMBER',
     'TITLE_DOCUMENT_NUMBER',
     'TOPUP_AMOUNT',
     'TOPUP_LAN_NUMBER',
     'LOAN_START_DATE',
     'CHANNEL_NAME',
     'SAP_REF_CODE1_B',
     'SAP_REF_CODE4_B',
     'GHFAM',
     'DOCKET_FTR',
     'DISBURSEMENT_QUERY_RAISED',
     'DISBURSEMENT_QUERY_RESOLVED',
     'DEDECISION',
     'SELF_EMPLOYED_RISK',
     'RELATIONSHIP_WITH_A2',
     'FIRST_NAME2',
     'REMARK1',
     'LOAN_PURPOSE',
     'PRODUCT',
     'LOAN_TYPE',
     'SUB_PRODUCT',
     'PLOT_LOAN_FLAG',
     'INDUSTRIAL_PROPERTY_FLAG',
     'LOAN_PURPOSE_CODE',
     'REJECT_STATUS',
     'REJECT_REMARK',
     'TYPES_OF_REJECT',
     'PRINCIPAL_OUTSTANDING',
     'GHFSM',
     'GHFSM_NAME',
     'GHFAM_BD',
     'GHFAM_BD_NAME',
     'GHF_AM',
     'GHFAM_NAME',
     'INCOME_PROGRAM_TYPE',
     'LEADID',
     'NO_FINANCE_DEVIATIONS',
     'INDIVIDUAL_DEVIATION_FLAG',
     'EMI_BREAK_SCHEME',
     'PARALLEL_FUNDING_SCHEME',
     'NHB_SCHEME',
     'DEMI_FLAG']
    column_directory['base_view']=['LAN_ID',
     'FINANCE_SOURCE_ID',
     'LOAN_STATUS',
     'DETAILED_STATUS',
     'STATUS',
     'QUEUE',
     'LOGIN_STATUS',
     'STATUS_SEG',
     'LOGIN_DATE',
     'EOMLOGN',
     'BOOKING_DATE',
     'SANCTION_DATE',
     'EOMSNCTN',
     'FIRST_REJECT_DATE',
     'EOMRJCT',
     'REPORTING_BRANCH',
     'FINANCE_TYPE',
     'PRODUCT',
     'LOAN_TYPE',
     'BOOKING_AMOUNT',
     'SANCTION_AMOUNT',
     'REQUESTED_AMOUNT',
     'NET_PREMIUM',
     'FIRST_ENTRY_TO_COLLATERAL',
     'EOMCLTRL']
    column_directory['customer_view']=['CUSTOMER_ID',
     'CUSTOMER_CIF',
     'CUSTOMER_CATEGORY_CODE',
     'CUSTOMER_FNAME',
     'CUSTOMER_MNAME',
     'CUSTOMER_LNAME',
     'CUSTOMER_SHRTNAME',
     'CUSTOMER_BRANCH_CODE',
     'CUSTOMER_DOB',
     'AGE_AS_OF_TODAY',
     'CUSTOMER_PASSPORT_NUMBER',
     'CUSTOMER_MOTHER_MAIDEN',
     'CUSTOMER_INDUSTRY_CODE',
     'CUSTOMER_SECTOR_CODE',
     'CUSTOMER_SUB_SECTOR_CODE',
     'CUSTOMER_TOTAL_INCOME',
     'CUSTOMER_SEGMENT_CODE',
     'CUSTOMER_SUB_SEGMENT_CODE',
     'CUSTOMER_TOTAL_EXPENSE',
     'NUMBER_OF_DEPENDENTS',
     'PHONE_NUMBER',
     'CUSTOMER_EMAIL',
     'CUSTOMER_ADDRESS_HOUSE_NUMBER',
     'CUSTOMER_FLAT_NUMBER',
     'CUSTOMER_ADDRESS_STREET',
     'CUSTOMER_ADDRESS_LINE1',
     'CUSTOMER_ADDRESS_LINE2',
     'CUSTOMER_ADDRESS_ZIP',
     'CUSTOMER_CITY_NAME',
     'CUSTOMER_PROVINCE_NAME',
     'CUSTOMER_COUNTRY_DESC',
     'SUB_CATEGORY',
     'DND',
     'OTHER_RELIGION',
     'NATURE_OF_BUSINESS',
     'CUSTOMER_RESIDENTIAL_STATUS',
     'QUALIFICATION',
     'CUSTOMER_MARITAL_STATUS_DESC',
     'CUSTOMER_STATUS_DESCRIPTION',
     'CUSTOMER_INDUSTRY_DESC',
     'CUSTOMER_SECTOR_DESC',
     'CUSTOMER_SUB_SECTOR_DESC',
     'CUSTOMER_PROFESSION_DESC',
     'CUSTOMER_NATIONALITY_DESC',
     'CUSTOMER_GENDER_DESC',
     'CUSTOMER_DEPARTMENT_DESC',
     'CUSTOMER_SALUATION_DESC',
     'CUSTOMER_CASTE_DESC',
     'CUSTOMER_RELIGION_DESC',
     'CUSTOMER_QUALIFICATION_DESCRIPTION',
     'TOTAL_WORK_EXPERIENCE',
     'OCCUPATION_CATEGORY',
     'SENP_1',
     'SENP_2',
     'SCORE',
     'CURRENT_RESI',
     'GROSS_RECEIPT',
     'GROSS_TURNOVER',
     'NET_PROFIT_FROM_BUSS',
     'OTHER_INCOME',
     'RENTAL_INCOME_1',
     'OTHER_INCOME_1',
     'EMPLOYERNAME',
     'IF_SALARIED',
     'DESIGNATION',
     'CURRENT_WORK_EXPERIENCE',
     'ID_TYPE_PROOF',
     'NET_PROFIT_FROM',
     'GROSS_ANNUAL_SALARY',
     'RENTALINCOME',
     'PAN_NUMBER',
     'NET_ANNUAL',
     'STAY_IN_SINCE',
     'OWNERSHIP',
     'ID_NAME_2']
    column_directory['insurance_view']=['LAN_ID',
     'APPLICATION_ID',
     'VAS_REFERENCE',
     'NET_PREMIUM',
     'INSURANCE_CODE',
     'INSURANCE_TYPE',
     'CHANNEL_CODE',
     'CHANNEL_NAME',
     'RM',
     'LOAN_ACTIVE_STATUS',
     'LOAN_STATUS',
     'NOMINEE_NAME',
     'NOMINEE_DOB',
     'NOMINEE_RELATION',
     'PRELATION_DESCRIPTION',
     'LOAN_TENURE',
     'POLICY_TENURE',
     'SUM_INSURED_RS',
     'NBFC_FLAG']
    column_directory['lanvas']=['LAN_ID','VAS_REFERENCE']
    column_directory['lancif']=['LAN_ID','CUSTOMER_CIF','CUSTOMER_ID','APPLICANT_TYPE']
    column_directory['cifvas']=['CUSTOMER_CIF','VAS_REFERENCE']
    column_directory['lancollat']=['LAN_ID','COLLATERAL_REFERENCE','ASSIGN_PERCENT']
    check_view={}    
    for view,view_col in column_directory.items():
        out = []
        approx=[]
        for word in cols:
            for sub in get_sub_strings(word.upper()):
                for s in view_col:
                    if sub == s.upper():
                        out.append(s.upper())
                    elif sub in s.upper():
                        approx.append(s.upper())
        if (len(out) != 0) :
            check_view[view]=(out,approx)
    return check_view
        
    
    
def get_sub_strings(s):
    words = s.split()
    for i in range(1, len(words)+1):      #reverse the order here
        for n in range(0, len(words)+1-i):
            yield ' '.join(words[n:n+i])
            
columncheckview(['STEPFINANCE','GPLFLAG_SANCTIONS','FINTYPE','BOOK_YEAR_MONTH','STATUS','CRE','LOAN_PURPOSE','FINBRANCH','WROI','PROCESSING_FEE','NET_PREMIUM', 'BOOKED_AMOUNT','PRINCIPAL_OUTSTANDING','Net insurance income'])


columncheckview([''])


def error_lans():
    a=['GHF1001FL0000328',
 'GHF1001FL0002120',
 'GHF1002FL0002436',
 'GHF1001FL0002119',
 'GHF1002FL0000299',
 'GHF1002FL0000640',
 'GHF1002HL0002943',
 'GHF1002HL0000836',
 'GHF1002FT0001610',
 'GHF1002FL0001993',
 'GHF1002HL0002773',
 'GHF1001FT0000552',
 'GHF1101LP0003918',
 'GHF1401HL0000123',
 'GHF1002HL0003082',
 'GHF1002FL0000605',
 'GHF1002HL0002977',
 'GHF1001FL0000327',
 'GHF1002HL0003004',
 'GHF1002FL0005334',
 'GHF1001FL0000912',
 'GHF1002FL0000257',
 'GHF1002HL0003367',
 'GHF1002FL0000744',
 'GHF1002FT0001009',
 'GHF1001FL0000329',
 'GHF1401HL0000122',
 'GHF1001HL0000342',
 'GHF1002HL0001014',
 'GHF1002HL0003484',
 'GHF1401HL0001902',
 'GHF1001HL0000900',
 'GHF1002FL0000063',
 'GHF1001FL0002118',
 'GHF1401HL0000124',
 'GHF1002FL0002252',
 'GHF1401HL0000125',
 'GHF1002FL0003178',
 'GHF1002FL0000659',
 'GHF1001HL0000967',
 'GFL3401LP0000361',
 'GHF1001HL0000966']
    return a
def remove_error_lans(df):
    try:
        df=df[df['REFERENCE'].isin(error_lans())==False]
    except:
        pass
    try:
        df=df[df['LAN_ID'].isin(error_lans())==False]
    except:
        pass
    try:
        df=df[df['FINREFERENCE'].isin(error_lans())==False]
    except:
        pass
    try:
        df=df[df['FINANCE_REFERENCE'].isin(error_lans())==False]
    except:
        pass
    return df

    
